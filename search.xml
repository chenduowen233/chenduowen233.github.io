<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>校招高频智力题</title>
      <link href="/%E6%A0%A1%E6%8B%9B%E9%AB%98%E9%A2%91%E6%99%BA%E5%8A%9B%E9%A2%98/"/>
      <url>/%E6%A0%A1%E6%8B%9B%E9%AB%98%E9%A2%91%E6%99%BA%E5%8A%9B%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="高频智力题"><a href="#高频智力题" class="headerlink" title="高频智力题"></a>高频智力题</h1><h3 id="高楼扔鸡蛋问题"><a href="#高楼扔鸡蛋问题" class="headerlink" title="高楼扔鸡蛋问题"></a><strong>高楼扔鸡蛋问题</strong></h3><p>有一栋楼共<code>**100**</code>层，一个鸡蛋从第<code>**N**</code>层及以上的楼层落下来会摔破， 在第<code>**N**</code>层以下的楼层落下不会摔破。给你<code>**2**</code>个鸡蛋，如何用最少的尝试次数，测试出鸡蛋不会摔碎的临界点？</p><details class="notion-toggle notion-block-e73ea2006387440b8510e04ad29bf36a" open="" style="box-sizing: border-box; margin-block: 0px; outline: 0px; padding: 3px 2px;"><summary style="box-sizing: border-box; margin-block: 0px; outline: none; cursor: pointer; color: var(--theme-color,#42b983); font-weight: 700; font-size: 20px !important;"></summary><div style="box-sizing: border-box; margin-block: 0px; outline: 0px; margin-left: 1.1em;"><div class="notion-text notion-block-7dfbcffd9ed04fdcb593ec7470abcefb" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 754.406px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 2px 0px 1px;">首先要说明的是这道题你要是一上来就说出正确答案，那说明你的智商不是超过160就是你做过这题。</div><div class="notion-text notion-block-eed58f4099fb4749be33c2e4402fc93e" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 754.406px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 1px 0px;">所以建议你循序渐进的回答，一上来就说最优解可能结果不会让面试官满意。</div><div class="notion-text notion-block-7427ed736ec444049d5f9c7c3659a67c" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 754.406px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 1px 0px;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">1. 暴力法</b></div><div class="notion-text notion-block-8483fff4db71498d9bfbe56b4d115054" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 754.406px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 1px 0px;">从<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">1</b></code>到<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">100</b></code>，一层一层试。在最坏情况下，这个方法需要扔<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">100</b></code>次。 这个办法太蠢了，完全用不上两个鸡蛋这个条件，不建议回答这个方法。</div><div class="notion-text notion-block-ff4d8b17353c4dff9634f0a6d44d85da" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 754.406px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 1px 0px;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">2. 二分法</b></div><div class="notion-text notion-block-d88ba2dd667441a3b0134be68d23d05a" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 754.406px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 1px 0px;">采用类似于二分查找的方法，把鸡蛋从一半楼层（<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">50</b></code>层）往下扔。</div><ul class="notion-list notion-list-disc notion-block-d30226aed5a6487a859af4ae853be965" style="box-sizing: border-box; margin-block: 0.6em; outline: 0px; margin: 0px; list-style-type: disc; padding-inline-start: 1.7em;"><li style="box-sizing: border-box; margin-block: 0px; outline: 0px; padding: 6px 0px; white-space: pre-wrap;">如果第一枚鸡蛋，在<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">50</b></code>层碎了，第二枚鸡蛋，就从第<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">1</b></code>层开始扔，一层一层增长，一直扔到第<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">49</b></code>层。</li></ul><ul class="notion-list notion-list-disc notion-block-f83b37a691c84be8a015d1a1f14e8512" style="box-sizing: border-box; margin-block: 0.6em; outline: 0px; margin: 0px; list-style-type: disc; padding-inline-start: 1.7em;"><li style="box-sizing: border-box; margin-block: 0px; outline: 0px; padding: 6px 0px; white-space: pre-wrap;">如果第一枚鸡蛋在<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">50</b></code>层没碎，则继续使用二分法，在剩余楼层的一半（<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">75</b></code>层）往下扔......</li></ul><div class="notion-text notion-block-5fd7c90e9c4649ebbbbc4eb132e2edab" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 754.406px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 1px 0px;">这个方法在最坏情况下，需要尝试<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">50</b></code>次。</div><div class="notion-text notion-block-c0bc768ca99e4e878bf5410666218130" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 754.406px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 1px 0px;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">3. 均匀法</b></div><div class="notion-text notion-block-07a38465dc714b1b854ac15a034c246b" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 754.406px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 1px 0px;">如何让第一枚鸡蛋和第二枚鸡蛋的尝试次数，尽可能均衡呢？</div><div class="notion-text notion-block-d5f727f732784df98f9b7ce05105c146" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 754.406px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 1px 0px;">很简单，做一个平方根运算，<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">100</b></code>的平方根是<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">10</b></code>。</div><div class="notion-text notion-block-9fa37de4f2fb4236afc6ca1d37cfde4f" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 754.406px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 1px 0px;">因此，我们尝试每<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">10</b></code>层扔一次，第一次从<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">10</b></code>层扔，第二次从<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">20</b></code>层扔，第三次从<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">30</b></code>层......一直扔到<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">100</b></code>层。</div><div class="notion-text notion-block-4068d2542e6542d690c3ebd2d13f09da" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 754.406px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 1px 0px;">这样的最好情况是在第<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">10</b></code>层碎掉，尝试次数为&nbsp;<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">1 + 9 = 10</b></code>次。</div><div class="notion-text notion-block-d176111578e64e79a992494b9d306919" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 754.406px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 1px 0px;">最坏的情况是在第<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">100</b></code>层碎掉，尝试次数为&nbsp;<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">10 + 9 = 19</b></code>次。</div><div class="notion-text notion-block-13fb330cf4db40a7abe3ff3ea8f9d6f6" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 754.406px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 1px 0px;">不过，这里有一个小小的优化点，我们可以从<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">15</b></code>层开始扔，接下来从<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">25</b></code>层、<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">35</b></code>层扔......一直到<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">95</b></code>层。</div><div class="notion-text notion-block-90c18385f3b44180991168352908f724" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 754.406px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 1px 0px;">这样最坏情况是在第<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">95</b></code>层碎掉，尝试次数为&nbsp;<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">9 + 9 = 18</b></code>次。</div><div class="notion-text notion-block-ad45f0c12a5648db9d49c4bfded423fd" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 754.406px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 1px 0px;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">4. 最优解法</b></div><div class="notion-text notion-block-80bf2cc1cc574ec98a592c475292ca7d" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 754.406px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 1px 0px;">最优解法是反向思考的经典：如果最优解法在最坏情况下需要扔<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">X</b></code>次，那第一次在第几层扔最好呢？</div><div class="notion-text notion-block-0723209cd8564a51a182e8a02475894c" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 754.406px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 1px 0px;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">答案是：从</b><code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">X</b></code><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">层扔</b></div><div class="notion-text notion-block-2f7c85ca5d4e46e797bfa2a438f21374" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 754.406px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 1px 0px;">假设最优的尝试次数的<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">x</b></code>次，为什么第一次扔就要选择第<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">x</b></code>层呢？</div><div class="notion-text notion-block-aff99d32eb534eea96ffb147d6d112db" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 754.406px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 1px 0px;">这里的解释会有些烧脑，请小伙伴们坐稳扶好：</div><ul class="notion-list notion-list-disc notion-block-3df9f57daa4c4517be9f3472a6573a7c" style="box-sizing: border-box; margin-block: 0.6em; outline: 0px; margin: 0px; list-style-type: disc; padding-inline-start: 1.7em;"><li style="box-sizing: border-box; margin-block: 0px; outline: 0px; padding: 6px 0px; white-space: pre-wrap;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">假设第一次扔在第</b><code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">x+1</b></code><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">层：</b></li></ul><div class="notion-text notion-block-6be02769db3d46b3bce2ad8e42e1c3e7" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 754.406px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 1px 0px;">如果第一个鸡蛋碎了，那么第二个鸡蛋只能从第1层开始一层一层扔，一直扔到第x层。</div><div class="notion-text notion-block-b3cd86c16adc468f883f7859fb8411af" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 754.406px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 1px 0px;">这样一来，我们总共尝试了<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">x+1</b></code>次，和假设尝试<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">x</b></code>次相悖。由此可见，第一次扔的楼层必须小于<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">x+1</b></code>层。</div><ul class="notion-list notion-list-disc notion-block-fa3d1acbdd0444baa10a513b4d71fe68" style="box-sizing: border-box; margin-block: 0.6em; outline: 0px; margin: 0px; list-style-type: disc; padding-inline-start: 1.7em;"><li style="box-sizing: border-box; margin-block: 0px; outline: 0px; padding: 6px 0px; white-space: pre-wrap;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">假设第一次扔在第</b><code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">x-1</b></code><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">层：</b></li></ul><div class="notion-text notion-block-6e5d4b15e00f410da8510026eb25f0f1" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 754.406px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 1px 0px;">如果第一个鸡蛋碎了，那么第二个鸡蛋只能从第<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">1</b></code>层开始一层一层扔，一直扔到第<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">x-2</b></code>层。</div><div class="notion-text notion-block-06d8659779c3439b866e302f153e585e" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 754.406px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 1px 0px;">这样一来，我们总共尝试了<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">x-2+1 = x-1</b></code>次，虽然没有超出假设次数，但似乎有些过于保守。</div><ul class="notion-list notion-list-disc notion-block-4fd1b48c5ebe4fe0875cfde01b60c5b1" style="box-sizing: border-box; margin-block: 0.6em; outline: 0px; margin: 0px; list-style-type: disc; padding-inline-start: 1.7em;"><li style="box-sizing: border-box; margin-block: 0px; outline: 0px; padding: 6px 0px; white-space: pre-wrap;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">假设第一次扔在第</b><code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">x</b></code><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">层：</b></li></ul><div class="notion-text notion-block-354331ea2bc94882a7a8763b14fc6d4f" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 754.406px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 1px 0px;">如果第一个鸡蛋碎了，那么第二个鸡蛋只能从第<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">1</b></code>层开始一层一层扔，一直扔到第<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">x-1</b></code>层。</div><div class="notion-text notion-block-4c708dac486642ef9a5c94a75186fbf8" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 754.406px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 1px 0px;">这样一来，我们总共尝试了<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">x-1+1 = x</b></code>次，刚刚好没有超出假设次数。</div><div class="notion-text notion-block-923b719b81f849f3857648a88149449d" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 754.406px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 1px 0px;">因此，要想尽量楼层跨度大一些，又要保证不超过假设的尝试次数x，那么第一次扔鸡蛋的最优选择就是第<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">x</b></code>层。</div><div class="notion-text notion-block-b70255a647e44f158e9b48ec43b6467d" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 754.406px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 1px 0px;">那么算最坏情况，第二次你只剩下<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">x-1</b></code>次机会，按照上面的说法，你第二次尝试的位置必然是<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">X +（X-1）</b></code>；</div><div class="notion-text notion-block-efd2707329c54055b85843869d28c2da" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 754.406px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 1px 0px;">以此类推我们可得：</div><div class="notion-text notion-block-46c380ff05a54d2c9aa321189c1a550b" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 754.406px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 1px 0px;"><code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">x + (x-1) + (x-2) + ... + 1 = 100</b></code></div><div class="notion-text notion-block-81f2a490dc5c41d3875a88f78ca29d7c" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 754.406px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 1px 0px;">这个方程不难理解：</div><div class="notion-text notion-block-f2ac81f900f24a549d6283b266f441fd" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 754.406px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 1px 0px;">左边的多项式是各次扔鸡蛋的楼层跨度之和。由于假设尝试<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">x</b></code>次，所以这个多项式共有<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">x</b></code>项。</div><div class="notion-text notion-block-d45592a7d1524c0b8dfda1dcb83b94c3" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 754.406px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 1px 0px;">右边是总的楼层数<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">100</b></code>。</div><div class="notion-text notion-block-5595c702e81c48a482fc2427b6974f0e" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 754.406px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 1px 0px;">下面我们来解这个方程：</div><div class="notion-text notion-block-255d2ec524c84f7882294f8cb6d0f0a4" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 754.406px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 1px 0px;"><code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">x + (x-1) + (x-2) + ... + 1 = 100</b></code>&nbsp;转化为&nbsp;<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">(x+1)*x/2 = 100</b></code></div><div class="notion-text notion-block-5d1fed07df904b6f87f1626ec314ae21" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 754.406px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 1px 0px;">最终x向上取整，得到&nbsp;<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">x = 14</b></code></div><div class="notion-text notion-block-6bda887926e448ec89e08d56e710f4bf" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 754.406px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 1px 0px;">因此，最优解在最坏情况的尝试次数是<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">14</b></code>次，第一次扔鸡蛋的楼层也是<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">14</b></code>层。</div><div class="notion-text notion-block-0ec834cd14e942d1995be50577699728" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 754.406px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 1px 0px;">最后，让我们把第一个鸡蛋没碎的情况下，所尝试的楼层数完整列举出来：</div><div class="notion-text notion-block-6bba3c34b2e3450684b9aa0870af4d26" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 754.406px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 1px 0px;"><code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">14，27， 39， 50， 60， 69， 77， 84， 90， 95， 99， 100</b></code></div><ul class="notion-list notion-list-disc notion-block-2bf5890b915d4b38b942930639031d9e" style="box-sizing: border-box; margin-block: 0.6em; outline: 0px; margin: 0px; list-style-type: disc; padding-inline-start: 1.7em;"><li style="box-sizing: border-box; margin-block: 0px; outline: 0px; padding: 6px 0px; white-space: pre-wrap;">举个栗子验证下：</li></ul><div class="notion-text notion-block-918abac39f9f495cac15a0fb3bc4803c" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 754.406px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 1px 0px;">假如鸡蛋不会碎的临界点是<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">65</b></code>层，那么第一个鸡蛋扔出的楼层是<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">14，27，50，60，69</b></code>。这时候啪的一声碎了。</div><div class="notion-text notion-block-3c7f4e8bea5f4bf69053048dd971228a" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 754.406px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 1px 0px;">第二个鸡蛋继续，从<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">61</b></code>层开始，<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">61，62，63，64，65，66</b></code>，啪的一声碎了。</div><div class="notion-text notion-block-6453e91b6e34467984428e1e7ab5a5b5" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 754.406px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 1px 0px;">因此得到不会碎的临界点<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">65</b></code>层，总尝试次数是&nbsp;<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">6 + 6 = 12 &lt; 14</b></code>&nbsp;。</div><div class="notion-text notion-block-f79cf0a804f64e9097b32593442e9600" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 754.406px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 1px 0px;">下面是我个人的理解：这个更像是优化版的均匀法，均匀法让你第二次尝试不超过<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">10</b></code>，但是第一次的位置无法保证（最多要<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">9</b></code>次，最好一次），这个由于每多一次尝试，楼层间隔就<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">-1</b></code>，最终使得第一次与第二次的和完全均匀（最差情况）。</div><div class="notion-text notion-block-6987b935a13c4513b9fa93a133c40bd6" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 754.406px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 1px 0px;">但是核心思路是逆向思考，因为即使理解了需要两次的和均匀也很难得到第一次要在哪层楼扔。</div><div class="notion-text notion-block-90e0ab81f7994dbd8ce2172976f9065a" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 754.406px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 1px 0px;">一旦理解了这种方法，多少层楼你都不会怕啦~</div></div></details><h3 id="找砝码问题"><a href="#找砝码问题" class="headerlink" title="找砝码问题"></a><strong>找砝码问题</strong></h3><p>有一个天平，九个砝码，一个轻一些，用天平至少几次能找到轻的？</p><details class="notion-toggle notion-block-bfcff54512ad4c488eb32b5cb6cb0d70" open="" style="box-sizing: border-box; margin-block: 0px; outline: 0px; padding: 3px 2px;"><summary style="box-sizing: border-box; margin-block: 0px; outline: none; cursor: pointer; color: var(--theme-color,#42b983); font-weight: 700; font-size: 20px !important;"></summary><div style="box-sizing: border-box; margin-block: 0px; outline: 0px; margin-left: 1.1em;"><div class="notion-text notion-block-2b9fcd11406b481686c23d3822cd69c3" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 603.198px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 2px 0px 1px;">三分法。</div><div class="notion-text notion-block-96b4cf7c089c4a24af6187da6de3a9ae" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 603.198px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 1px 0px;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">答案：2次。</b></div><ul class="notion-list notion-list-disc notion-block-8ca0505f81814518a1ff2628cbf6f359" style="box-sizing: border-box; margin-block: 0.6em; outline: 0px; margin: 0px; list-style-type: disc; padding-inline-start: 1.7em;"><li style="box-sizing: border-box; margin-block: 0px; outline: 0px; padding: 6px 0px; white-space: pre-wrap;">分三份，两份比较，第三份放一边，如果两份相等质量，则说明轻的在第三份。</li></ul><ul class="notion-list notion-list-disc notion-block-e3f466065a6845859133a5df45dd906a" style="box-sizing: border-box; margin-block: 0.6em; outline: 0px; margin: 0px; list-style-type: disc; padding-inline-start: 1.7em;"><li style="box-sizing: border-box; margin-block: 0px; outline: 0px; padding: 6px 0px; white-space: pre-wrap;">不论如何，可以确定轻的砝码在某一份的三个之中，再用一次三分法，即可确定。</li></ul></div></details><h3 id="找玻璃球问题"><a href="#找玻璃球问题" class="headerlink" title="找玻璃球问题"></a><strong>找玻璃球问题</strong></h3><p>有十组玻璃球，每组十个，每个玻璃球重<code>**10**</code>g，但其中有一组玻璃球每个只有<code>**9**</code>g，给你一个能显示克数的秤，问你最少几次能找到轻的那一组砝码？</p><details class="notion-toggle notion-block-d20bc14cb57d433d8a876b43bb2f3fc4" open="" style="box-sizing: border-box; margin-block: 0px; outline: 0px; padding: 3px 2px;"><summary style="box-sizing: border-box; margin-block: 0px; outline: none; cursor: pointer; color: var(--theme-color,#42b983); font-weight: 700; font-size: 20px !important;"></summary><div style="box-sizing: border-box; margin-block: 0px; outline: 0px; margin-left: 1.1em;"><div class="notion-text notion-block-50da2c76fddb46c69aad8c8c7a0fcfa2" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 599.198px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 2px 0px 1px;">将十组玻璃珠编号<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">1~10</code>，然后第一组拿一个，第二组拿两个以此类推...第十组拿十个将这些玻璃珠一起放到秤上称出克数<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">x</code>，</div><div class="notion-text notion-block-fcc517a26cc14204ade3c98a6965636c" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 599.198px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 1px 0px;">则<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">y = 1*10 + 2*10 + 3*10 + ... + 10 * 10 - x</code></div><div class="notion-text notion-block-6938d281e303414699c550aab6bf4dd2" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 599.198px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 1px 0px;">等价于<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">y = (1 + 2 + 3 + ... + 10) * 10 - x = 550 - x</code></div><div class="notion-text notion-block-96c80d49c77d4da0ae4f2f87970541d3" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 599.198px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 1px 0px;">第<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">y</code>组就是轻的那组。</div></div></details><h3 id="毒药问题"><a href="#毒药问题" class="headerlink" title="毒药问题"></a><strong>毒药问题</strong></h3><p><code>**1000**</code>瓶水，其中有一瓶可以无限稀释的毒药，小白鼠喝了毒水就会死（不论含量多低）。要快速找出哪一瓶有毒，需要几只小白鼠？</p><details class="notion-toggle notion-block-9415ec64b0144c8397b09ce064d94240" open="" style="box-sizing: border-box; margin-block: 0px; outline: 0px; padding: 3px 2px;"><summary style="box-sizing: border-box; margin-block: 0px; outline: none; cursor: pointer; color: var(--theme-color,#42b983); font-weight: 700; font-size: 20px !important;"></summary><div style="box-sizing: border-box; margin-block: 0px; outline: 0px; margin-left: 1.1em;"><div class="notion-text notion-block-9481820a9e154103a54e8bb3c09e4943" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 754.406px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 2px 0px 1px;">二进制思路。</div><div class="notion-text notion-block-89b533fad9f142d3998aab17fd88d4a9" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 754.406px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 1px 0px;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">答：</b><code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">2^10 = 1024 &gt; 1000</b></code><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">，因此</b><code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;"><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">10</b></code><b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">只小白鼠即可。</b></div><div class="notion-text notion-block-2e21295978c64ce79bd6488f7ad3fea8" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 754.406px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 1px 0px;">给<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">1000</code>瓶水按照二进制编号，比如<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">3</code>号编为<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">00000 00011</code>，拿<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">10</code>个碗，对应<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">10</code>位，对于<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">3</code>号水来说，最后两位是<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">1</code>，则把水混合进最后两个碗中。最终把<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">10</code>碗水给对应的小白鼠喝，根据最后小白鼠死亡的情况（死即为<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">1</code>，活即为<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">0</code>），即可确定出有毒的那碗水。</div></div></details><h3 id="生成随机数问题"><a href="#生成随机数问题" class="headerlink" title="生成随机数问题"></a><strong>生成随机数问题</strong></h3><p>给定生成<code>**1**</code>到<code>**5**</code>的随机数<code>**Rand5()**</code>，如何得到生成<code>**1**</code>到<code>**7**</code>的随机数函数<code>**Rand7()**</code>？</p><details class="notion-toggle notion-block-2c2bb75282074c728f44b7a7b8b4b938" open="" style="box-sizing: border-box; margin-block: 0px; outline: 0px; padding: 3px 2px;"><summary style="box-sizing: border-box; margin-block: 0px; outline: none; cursor: pointer; color: var(--theme-color,#42b983); font-weight: 700; font-size: 20px !important;"></summary><div style="box-sizing: border-box; margin-block: 0px; outline: 0px; margin-left: 1.1em;"><ul class="notion-list notion-list-disc notion-block-1a9e2dff6a9149dd8555ba04c2e412c6" style="box-sizing: border-box; margin-block: 0.6em; outline: 0px; margin: 0px; list-style-type: disc; padding-inline-start: 1.7em;"><li style="box-sizing: border-box; margin-block: 0px; outline: 0px; padding: 6px 0px; white-space: pre-wrap;">使用 <code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">rand5()</code> 生成 <code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">rand7()</code></li></ul><pre class="notion-code language-java" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 444.594px; padding: 0px; margin: 0.5em 0px 1em; border-radius: 0.375rem; tab-size: 4; display: block; overflow: visible; background: none rgb(253, 253, 253); font-family: Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; border: 1px solid rgb(229, 231, 235); color: rgb(31, 41, 55); font-size: 13.6px; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; hyphens: none; position: relative;"><code class=" language-java" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(31, 41, 55); background: none !important; font-family: Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none; max-height: inherit; height: inherit; padding: 0px !important; display: block; overflow: auto; border: 0px !important; box-shadow: none !important; position: relative;"><span class="token comment" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(91, 155, 76);">// 需要随机得到 1-7</span><span class="token keyword" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(59, 130, 246);">public</span> <span class="token keyword" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(59, 130, 246);">static</span> <span class="token keyword" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(59, 130, 246);">int</span> <span class="token function" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(236, 72, 153);">rand7</span><span class="token punctuation" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(55, 65, 81);">(</span><span class="token punctuation" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(55, 65, 81);">)</span> <span class="token punctuation" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(55, 65, 81);">&#123;</span>    <span class="token keyword" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(59, 130, 246);">while</span> <span class="token punctuation" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(55, 65, 81);">(</span><span class="token boolean" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(16, 185, 129);">true</span><span class="token punctuation" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(55, 65, 81);">)</span> <span class="token punctuation" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(55, 65, 81);">&#123;</span>      <span class="token keyword" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(59, 130, 246);">int</span> row<span class="token punctuation" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(55, 65, 81);">,</span> col<span class="token punctuation" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(55, 65, 81);">,</span> idx<span class="token punctuation" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(55, 65, 81);">;</span>      <span class="token comment" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(91, 155, 76);">// rand5() 返回 1-5</span>      row <span class="token operator" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(245, 158, 11); background: none;">=</span> <span class="token function" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(236, 72, 153);">rand5</span><span class="token punctuation" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(55, 65, 81);">(</span><span class="token punctuation" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(55, 65, 81);">)</span><span class="token punctuation" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(55, 65, 81);">;</span> <span class="token comment" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(91, 155, 76);">// 5 * 5 = 25, 设想一个 5*5 的矩阵</span>      col <span class="token operator" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(245, 158, 11); background: none;">=</span> <span class="token function" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(236, 72, 153);">rand5</span><span class="token punctuation" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(55, 65, 81);">(</span><span class="token punctuation" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(55, 65, 81);">)</span><span class="token punctuation" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(55, 65, 81);">;</span> <span class="token comment" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(91, 155, 76);">// 然后找到小于25的，7的最大倍数21</span>      idx <span class="token operator" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(245, 158, 11); background: none;">=</span> col <span class="token operator" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(245, 158, 11); background: none;">+</span> <span class="token punctuation" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(55, 65, 81);">(</span>row <span class="token operator" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(245, 158, 11); background: none;">-</span> <span class="token number" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(16, 185, 129);">1</span><span class="token punctuation" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(55, 65, 81);">)</span> <span class="token operator" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(245, 158, 11); background: none;">*</span> <span class="token number" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(16, 185, 129);">5</span><span class="token punctuation" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(55, 65, 81);">;</span>      <span class="token keyword" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(59, 130, 246);">if</span> <span class="token punctuation" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(55, 65, 81);">(</span>idx <span class="token operator" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(245, 158, 11); background: none;">&lt;=</span> <span class="token number" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(16, 185, 129);">21</span><span class="token punctuation" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(55, 65, 81);">)</span> <span class="token comment" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(91, 155, 76);">// 只考虑 1-21，划分成 7 份</span>        <span class="token keyword" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(59, 130, 246);">return</span> <span class="token number" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(16, 185, 129);">1</span> <span class="token operator" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(245, 158, 11); background: none;">+</span> <span class="token punctuation" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(55, 65, 81);">(</span>idx <span class="token operator" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(245, 158, 11); background: none;">-</span> <span class="token number" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(16, 185, 129);">1</span><span class="token punctuation" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(55, 65, 81);">)</span> <span class="token operator" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(245, 158, 11); background: none;">%</span> <span class="token number" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(16, 185, 129);">7</span><span class="token punctuation" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(55, 65, 81);">;</span>    <span class="token punctuation" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(55, 65, 81);">&#125;</span><span class="token punctuation" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(55, 65, 81);">&#125;</span></code></pre></div></details><h3 id="先手必胜策略问题："><a href="#先手必胜策略问题：" class="headerlink" title="先手必胜策略问题："></a><strong>先手必胜策略问题：</strong></h3><ul><li><code>**100**</code>本书，每次能够拿<code>**1-5**</code>本，怎么拿能保证最后一次是你拿？</li></ul><details class="notion-toggle notion-block-6d6e1ef3f3ff4c688accb43b732b9e3e" open="" style="box-sizing: border-box; margin-block: 0px; outline: 0px; padding: 3px 2px;"><summary style="box-sizing: border-box; margin-block: 0px; outline: none; cursor: pointer; color: var(--theme-color,#42b983); font-weight: 700; font-size: 20px !important;"></summary><div style="box-sizing: border-box; margin-block: 0px; outline: 0px; margin-left: 1.1em;"><ul class="notion-list notion-list-disc notion-block-fc687de67c604692b0d6d34620e7cfd6" style="box-sizing: border-box; margin-block: 0.6em; outline: 0px; margin: 0px; list-style-type: disc; padding-inline-start: 1.7em;"><li style="box-sizing: border-box; margin-block: 0px; outline: 0px; padding: 6px 0px; white-space: pre-wrap;">卡关键点，每次只能拿<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">1</code><code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">5</code>本，所以当剩下<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">6</code>本的时候，不论对面怎么拿你都能赢；</li></ul><ul class="notion-list notion-list-disc notion-block-fdd0440fad1d4655afe5f957badd069c" style="box-sizing: border-box; margin-block: 0.6em; outline: 0px; margin: 0px; list-style-type: disc; padding-inline-start: 1.7em;"><li style="box-sizing: border-box; margin-block: 0px; outline: 0px; padding: 6px 0px; white-space: pre-wrap;">然后推<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">6</code>的倍数：<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">12、18、...、96</code>，也就是一开始要拿<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">4</code>本；</li></ul><ul class="notion-list notion-list-disc notion-block-896eb75df19d44d78050202c38f4aa29" style="box-sizing: border-box; margin-block: 0.6em; outline: 0px; margin: 0px; list-style-type: disc; padding-inline-start: 1.7em;"><li style="box-sizing: border-box; margin-block: 0px; outline: 0px; padding: 6px 0px; white-space: pre-wrap;">接下来对面拿<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">1</code>，你就拿<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">5</code>，对面拿<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">2</code>，你就拿<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">4</code>，总之让你拿的和对面拿的加起来是<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">6</code>，最终就能赢。</li></ul></div></details><ul><li>推广到<code>**n**</code>本书，每次拿<code>**1-k**</code>本，怎么保证最后一次是你拿？</li></ul><h3 id="瓶子换饮料问题"><a href="#瓶子换饮料问题" class="headerlink" title="瓶子换饮料问题"></a><strong>瓶子换饮料问题</strong></h3><p><code>**1000**</code>瓶饮料，<code>**3**</code>个空瓶子能够换<code>**1**</code>瓶饮料，问最多能喝几瓶？</p><details class="notion-toggle notion-block-e515da2cee8e427d99159ac9ff836e1f" open="" style="box-sizing: border-box; margin-block: 0px; outline: 0px; padding: 3px 2px;"><summary style="box-sizing: border-box; margin-block: 0px; outline: none; cursor: pointer; color: var(--theme-color,#42b983); font-weight: 700; font-size: 20px !important;"></summary><div style="box-sizing: border-box; margin-block: 0px; outline: 0px; margin-left: 1.1em;"><ul class="notion-list notion-list-disc notion-block-8fecc0f4a8e449739dd4ad47f67549f8" style="box-sizing: border-box; margin-block: 0.6em; outline: 0px; margin: 0px; list-style-type: disc; padding-inline-start: 1.7em;"><li style="box-sizing: border-box; margin-block: 0px; outline: 0px; padding: 6px 0px; white-space: pre-wrap;"><code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">1000 % 3 = 333...1</code> 喝掉<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">1000</code>瓶,可以换<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">333</code>瓶汽水, 余<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">1</code>个空瓶</li></ul><ul class="notion-list notion-list-disc notion-block-d185c315a80f47aab39d5dc87cc74e00" style="box-sizing: border-box; margin-block: 0.6em; outline: 0px; margin: 0px; list-style-type: disc; padding-inline-start: 1.7em;"><li style="box-sizing: border-box; margin-block: 0px; outline: 0px; padding: 6px 0px; white-space: pre-wrap;"><code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">333 % 3 = 111...0</code>　喝掉<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">333</code>瓶，可以换<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">111</code>瓶汽水, 余<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">0</code>个空瓶</li></ul><ul class="notion-list notion-list-disc notion-block-90c3a5f82954423f962dca0d16edca08" style="box-sizing: border-box; margin-block: 0.6em; outline: 0px; margin: 0px; list-style-type: disc; padding-inline-start: 1.7em;"><li style="box-sizing: border-box; margin-block: 0px; outline: 0px; padding: 6px 0px; white-space: pre-wrap;"><code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">111 % 3 = 37...0</code> 喝掉<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">111</code>瓶，可以换<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">37</code>瓶汽水, 余<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">0</code>个空瓶</li></ul><ul class="notion-list notion-list-disc notion-block-4bab8101a7b446e19440509231d998b4" style="box-sizing: border-box; margin-block: 0.6em; outline: 0px; margin: 0px; list-style-type: disc; padding-inline-start: 1.7em;"><li style="box-sizing: border-box; margin-block: 0px; outline: 0px; padding: 6px 0px; white-space: pre-wrap;"><code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">37 % 3 = 12...1</code> 喝掉<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">37</code>瓶，可以换<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">12</code>瓶汽水, 余<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">1</code>个空瓶</li></ul><ul class="notion-list notion-list-disc notion-block-67a00ccdf5554bb8b7288a1f58608de1" style="box-sizing: border-box; margin-block: 0.6em; outline: 0px; margin: 0px; list-style-type: disc; padding-inline-start: 1.7em;"><li style="box-sizing: border-box; margin-block: 0px; outline: 0px; padding: 6px 0px; white-space: pre-wrap;"><code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">12 % 3 = 4...0</code> 喝掉<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">12</code>瓶，可以换<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">4</code>瓶汽水, 余<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">0</code>个空瓶</li></ul><ul class="notion-list notion-list-disc notion-block-4ec5d648a62b4e3e8afdee217206b208" style="box-sizing: border-box; margin-block: 0.6em; outline: 0px; margin: 0px; list-style-type: disc; padding-inline-start: 1.7em;"><li style="box-sizing: border-box; margin-block: 0px; outline: 0px; padding: 6px 0px; white-space: pre-wrap;"><code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">4 % 3 = 1...1</code> 喝掉<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">4</code>瓶，可以换<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">1</code>瓶汽水, 余<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">1</code>个空瓶</li></ul><ul class="notion-list notion-list-disc notion-block-3e916ddc66d04f54870886c03e11ecd7" style="box-sizing: border-box; margin-block: 0.6em; outline: 0px; margin: 0px; list-style-type: disc; padding-inline-start: 1.7em;"><li style="box-sizing: border-box; margin-block: 0px; outline: 0px; padding: 6px 0px; white-space: pre-wrap;">此时剩下<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">1</code>瓶汽水 + <code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">3</code>个空瓶，其中<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">3</code>个空瓶可以再换<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">1</code>瓶</li></ul><ul class="notion-list notion-list-disc notion-block-7c4eb16be7654b78ada109a3180f7a02" style="box-sizing: border-box; margin-block: 0.6em; outline: 0px; margin: 0px; list-style-type: disc; padding-inline-start: 1.7em;"><li style="box-sizing: border-box; margin-block: 0px; outline: 0px; padding: 6px 0px; white-space: pre-wrap;">此时剩下<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">2</code>瓶，喝掉<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">2</code>瓶，不能再换了。总共：<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">1000 + 333 + 111 + 37 + 12 + 4 + 2 = 1499</code>瓶</li></ul></div></details><h3 id="重合问题"><a href="#重合问题" class="headerlink" title="重合问题"></a><strong>重合问题</strong></h3><p>在一天的<code>**24**</code>小时之中，时钟的时针、分针和秒针完全重合在一起的时候有几次？都分别是什么时间？</p><details class="notion-toggle notion-block-45e2d24742d44f08aeb1e674b04e0475" open="" style="box-sizing: border-box; margin-block: 0px; outline: 0px; padding: 3px 2px;"><summary style="box-sizing: border-box; margin-block: 0px; outline: none; cursor: pointer; color: var(--theme-color,#42b983); font-weight: 700; font-size: 20px !important;"></summary><div style="box-sizing: border-box; margin-block: 0px; outline: 0px; margin-left: 1.1em;"><ul class="notion-list notion-list-disc notion-block-d2e2a79b0c7947e4999dff0eda7909a3" style="box-sizing: border-box; margin-block: 0.6em; outline: 0px; margin: 0px; list-style-type: disc; padding-inline-start: 1.7em;"><li style="box-sizing: border-box; margin-block: 0px; outline: 0px; padding: 6px 0px; white-space: pre-wrap;">假设时针的角速度为 <code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">ω（ω = 1 / 120 (度/秒)）</code>，那么分针的角速度就为 <code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">12ω</code>，秒针的角速度为 <code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">720ω</code></li></ul><ul class="notion-list notion-list-disc notion-block-7233d60ad6cd43a89454b4f613a560cc" style="box-sizing: border-box; margin-block: 0.6em; outline: 0px; margin: 0px; list-style-type: disc; padding-inline-start: 1.7em;"><li style="box-sizing: border-box; margin-block: 0px; outline: 0px; padding: 6px 0px; white-space: pre-wrap;">假设时针和分针在 <code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">t</code> 秒后重合，那么分针在 <code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">t</code> 时间内走过的角度减去时针在 <code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">t</code> 时间内走过的角度，得到的结果肯定是 <code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">360</code> 的整数倍</li></ul><ul class="notion-list notion-list-disc notion-block-d09f78f23c954714b594f699a5681909" style="box-sizing: border-box; margin-block: 0.6em; outline: 0px; margin: 0px; list-style-type: disc; padding-inline-start: 1.7em;"><li style="box-sizing: border-box; margin-block: 0px; outline: 0px; padding: 6px 0px; white-space: pre-wrap;">根据上面的规则，可以算出<b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">时针和分针</b>重合的时间 – 集合 <code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">A</code></li></ul><ul class="notion-list notion-list-disc notion-block-b0dab35ed60b4e74a86f37e85ac2cdd5" style="box-sizing: border-box; margin-block: 0.6em; outline: 0px; margin: 0px; list-style-type: disc; padding-inline-start: 1.7em;"><li style="box-sizing: border-box; margin-block: 0px; outline: 0px; padding: 6px 0px; white-space: pre-wrap;">同理也能算出<b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">分针和秒针</b>重合的时间 – 集合 <code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">B</code></li></ul><ul class="notion-list notion-list-disc notion-block-dc8b21830c144236b4e7b8e4c06c149a" style="box-sizing: border-box; margin-block: 0.6em; outline: 0px; margin: 0px; list-style-type: disc; padding-inline-start: 1.7em;"><li style="box-sizing: border-box; margin-block: 0px; outline: 0px; padding: 6px 0px; white-space: pre-wrap;">那么<b style="box-sizing: border-box; margin-block: 0px; outline: 0px; font-weight: 600;">时针、分针及秒针</b>三者重合的时间就是集合 <code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">A、B</code> 的交集</li></ul><div class="notion-text notion-block-187614cb575e44e3ac9db79a10b16bdc" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 754.406px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 1px 0px;">结果：</div><ul class="notion-list notion-list-disc notion-block-8ce52c6d836b4262a44c1349291935ed" style="box-sizing: border-box; margin-block: 0.6em; outline: 0px; margin: 0px; list-style-type: disc; padding-inline-start: 1.7em;"><li style="box-sizing: border-box; margin-block: 0px; outline: 0px; padding: 6px 0px; white-space: pre-wrap;"><code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">A.length = 22</code></li></ul><ul class="notion-list notion-list-disc notion-block-af4f2b111d734dc19c7efdd1c7d84792" style="box-sizing: border-box; margin-block: 0.6em; outline: 0px; margin: 0px; list-style-type: disc; padding-inline-start: 1.7em;"><li style="box-sizing: border-box; margin-block: 0px; outline: 0px; padding: 6px 0px; white-space: pre-wrap;"><code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">B.length = 1416</code></li></ul><ul class="notion-list notion-list-disc notion-block-05de586524954a4bb855698c7e0b2faf" style="box-sizing: border-box; margin-block: 0.6em; outline: 0px; margin: 0px; list-style-type: disc; padding-inline-start: 1.7em;"><li style="box-sizing: border-box; margin-block: 0px; outline: 0px; padding: 6px 0px; white-space: pre-wrap;"><code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">A ∩ B = ['00:00:00', '12:00:00'] = 2</code></li></ul></div></details><h3 id="赛马问题（腾讯高频）"><a href="#赛马问题（腾讯高频）" class="headerlink" title="赛马问题（腾讯高频）"></a><strong>赛马问题（腾讯高频）</strong></h3><ul><li><p>有<code>**25**</code>匹马，每场比赛只能赛<code>**5**</code>匹，找最快的<code>**3**</code>匹马，至少要赛多少场？</p></li><li><p>有<code>**64**</code>匹马，每场比赛只能赛<code>**8**</code>匹，找最快的<code>**4**</code>匹马，至少要赛多少场？</p></li><li><p>有<code>**25**</code>匹马，每场比赛只能赛<code>**5**</code>匹，找最快的<code>**5**</code>匹马，至少要赛多少场？</p></li></ul><details class="notion-toggle notion-block-0604419444854959a5c7e40db0b77648" open="" style="box-sizing: border-box; margin-block: 0px; outline: 0px; padding: 3px 2px;"><summary style="box-sizing: border-box; margin-block: 0px; outline: none; cursor: pointer; color: var(--theme-color,#42b983); font-weight: 700; font-size: 20px !important;"></summary><div style="box-sizing: border-box; margin-block: 0px; outline: 0px; margin-left: 1.1em;"><ul class="notion-list notion-list-disc notion-block-26f1990b21424fa29904c3b1934713a9" style="box-sizing: border-box; margin-block: 0.6em; outline: 0px; margin: 0px; list-style-type: disc; padding-inline-start: 1.7em;"><li style="box-sizing: border-box; margin-block: 0px; outline: 0px; padding: 6px 0px; white-space: pre-wrap;"><code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">25</code>匹马<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">5</code>条跑道找最快的<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">3</code>匹马，需要跑几次？答案：<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">7</code>次</li></ul><ul class="notion-list notion-list-disc notion-block-d75f21044b014893b4fa0a9216788ee8" style="box-sizing: border-box; margin-block: 0.6em; outline: 0px; margin: 0px; list-style-type: disc; padding-inline-start: 1.7em;"><li style="box-sizing: border-box; margin-block: 0px; outline: 0px; padding: 6px 0px; white-space: pre-wrap;"><code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">64</code>匹马<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">8</code>条跑道找最快的<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">4</code>匹马，需要跑几次？答案：最少<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">10</code>次，最多<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">11</code>次</li></ul><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-e61926d37d3e4a01b6ddf6b1e755494b" style="box-sizing: border-box; margin-block: 0px; outline: 0px; margin: 1em 0px; max-width: 100%; min-width: 100%; align-self: center; display: flex; flex-direction: column;"><div style="box-sizing: border-box; margin-block: 0px; outline: 0px; position: relative; display: flex; justify-content: center; align-self: center; width: 754.406px; max-width: 100%; flex-direction: column;"><img src="https://www.notion.so/image/https%3A%2F%2Ftva1.sinaimg.cn%2Flarge%2F0081Kckwly1gls7vtmjw9j324y0kiwzt.jpg?table=block&amp;id=e61926d3-7d3e-4a01-b6dd-f6b1e755494b&amp;cache=v2" loading="lazy" alt="notion image" decoding="async" class="medium-zoom-image" style="box-sizing: border-box; margin-block: 0px; outline: 0px; border-radius: 0px; cursor: zoom-in; transition: transform 0.3s cubic-bezier(0.2, 0, 0.2, 1) 0s !important; width: 754.406px; height: 200.99px; max-height: 100%;"></div></figure><div class="notion-text notion-block-5496b385a5364a9ab7af1b5ef1290e09" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 754.406px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 1px 0px;">此时<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">A1</code>显然是第一名，接下来需要找出第<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">2、3、4</code>名</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-35b387aacdb9423992d5fb17a3f0e6a2" style="box-sizing: border-box; margin-block: 0px; outline: 0px; margin: 1em 0px; max-width: 100%; min-width: 100%; align-self: center; display: flex; flex-direction: column;"><div style="box-sizing: border-box; margin-block: 0px; outline: 0px; position: relative; display: flex; justify-content: center; align-self: center; width: 754.406px; max-width: 100%; flex-direction: column;"><img src="https://www.notion.so/image/https%3A%2F%2Ftva1.sinaimg.cn%2Flarge%2F0081Kckwly1gls84xp950j322k0kgqj9.jpg?table=block&amp;id=35b387aa-cdb9-4239-92d5-fb17a3f0e6a2&amp;cache=v2" loading="lazy" alt="notion image" decoding="async" class="medium-zoom-image" style="box-sizing: border-box; margin-block: 0px; outline: 0px; border-radius: 0px; cursor: zoom-in; transition: transform 0.3s cubic-bezier(0.2, 0, 0.2, 1) 0s !important; width: 754.406px; height: 206.865px; max-height: 100%;"></div></figure><div class="notion-text notion-block-615b48094e97405ca511d6e2d3fb15b2" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 754.406px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 1px 0px;">如果<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">A3</code>拿了第一名</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-0de30bdfb18c4d1b8965acec7cfd6cfd" style="box-sizing: border-box; margin-block: 0px; outline: 0px; margin: 1em 0px; max-width: 100%; min-width: 100%; align-self: center; display: flex; flex-direction: column;"><div style="box-sizing: border-box; margin-block: 0px; outline: 0px; position: relative; display: flex; justify-content: center; align-self: center; width: 754.406px; max-width: 100%; flex-direction: column;"><img src="https://www.notion.so/image/https%3A%2F%2Ftva1.sinaimg.cn%2Flarge%2F0081Kckwly1gls7z4mnnoj326g0k67ov.jpg?table=block&amp;id=0de30bdf-b18c-4d1b-8965-acec7cfd6cfd&amp;cache=v2" loading="lazy" alt="notion image" decoding="async" class="medium-zoom-image" style="box-sizing: border-box; margin-block: 0px; outline: 0px; border-radius: 0px; cursor: zoom-in; transition: transform 0.3s cubic-bezier(0.2, 0, 0.2, 1) 0s !important; width: 754.406px; height: 193.938px; max-height: 100%;"></div></figure><div class="notion-text notion-block-f22fe0501f1541e8bb7a41732730582f" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 754.406px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 1px 0px;">如果<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">A3</code>不是第一，也就是说<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">B1</code>拿了第一</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-a756d260d66d4f33952562813c252d54" style="box-sizing: border-box; margin-block: 0px; outline: 0px; margin: 1em 0px; max-width: 100%; min-width: 100%; align-self: center; display: flex; flex-direction: column;"><div style="box-sizing: border-box; margin-block: 0px; outline: 0px; position: relative; display: flex; justify-content: center; align-self: center; width: 754.406px; max-width: 100%; flex-direction: column;"><img src="https://www.notion.so/image/https%3A%2F%2Ftva1.sinaimg.cn%2Flarge%2F0081Kckwly1gls83sba2uj326y0kwe00.jpg?table=block&amp;id=a756d260-d66d-4f33-9525-62813c252d54&amp;cache=v2" loading="lazy" alt="notion image" decoding="async" class="medium-zoom-image" style="box-sizing: border-box; margin-block: 0px; outline: 0px; border-radius: 0px; cursor: zoom-in; transition: transform 0.3s cubic-bezier(0.2, 0, 0.2, 1) 0s !important; width: 754.406px; height: 199.615px; max-height: 100%;"></div></figure><ul class="notion-list notion-list-disc notion-block-f29bf1b438364173a7e9d2785364eef5" style="box-sizing: border-box; margin-block: 0.6em; outline: 0px; margin: 0px; list-style-type: disc; padding-inline-start: 1.7em;"><li style="box-sizing: border-box; margin-block: 0px; outline: 0px; padding: 6px 0px; white-space: pre-wrap;"><code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">25</code>匹马<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">5</code>条跑道找最快的<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">5</code>匹马，需要跑几次？答案：最少<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">8</code>次，最多<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">9</code>次</li></ul><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-5f54c58fc8784349b3296a15892b922f" style="box-sizing: border-box; margin-block: 0px; outline: 0px; margin: 1em 0px; max-width: 100%; min-width: 100%; align-self: center; display: flex; flex-direction: column;"><div style="box-sizing: border-box; margin-block: 0px; outline: 0px; position: relative; display: flex; justify-content: center; align-self: center; width: 754.406px; max-width: 100%; flex-direction: column;"><img src="https://www.notion.so/image/https%3A%2F%2Ftva1.sinaimg.cn%2Flarge%2F0081Kckwly1gls7v9cethj32420g8n14.jpg?table=block&amp;id=5f54c58f-c878-4349-b329-6a15892b922f&amp;cache=v2" loading="lazy" alt="notion image" decoding="async" class="medium-zoom-image" style="box-sizing: border-box; margin-block: 0px; outline: 0px; border-radius: 0px; cursor: zoom-in; transition: transform 0.3s cubic-bezier(0.2, 0, 0.2, 1) 0s !important; width: 754.406px; height: 160.906px; max-height: 100%;"></div></figure><div class="notion-text notion-block-3ffa757b9b6b4e77b3fb04ab987b735c" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 754.406px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 1px 0px;">现在已经跑了<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">5 + 1</code>=<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">6</code>次</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-4519e4a527e8419d8e6e8056a8f4acb6" style="box-sizing: border-box; margin-block: 0px; outline: 0px; margin: 1em 0px; max-width: 100%; min-width: 100%; align-self: center; display: flex; flex-direction: column;"><div style="box-sizing: border-box; margin-block: 0px; outline: 0px; position: relative; display: flex; justify-content: center; align-self: center; width: 754.406px; max-width: 100%; flex-direction: column;"><img src="https://www.notion.so/image/https%3A%2F%2Ftva1.sinaimg.cn%2Flarge%2F0081Kckwly1gls7oou8h2j324k0g4wun.jpg?table=block&amp;id=4519e4a5-27e8-419d-8e6e-8056a8f4acb6&amp;cache=v2" loading="lazy" alt="notion image" decoding="async" class="medium-zoom-image" style="box-sizing: border-box; margin-block: 0px; outline: 0px; border-radius: 0px; cursor: zoom-in; transition: transform 0.3s cubic-bezier(0.2, 0, 0.2, 1) 0s !important; width: 754.406px; height: 158.76px; max-height: 100%;"></div></figure><div class="notion-text notion-block-0f7c67dc4cf64d05b7cd6188c5c8e92e" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 754.406px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 1px 0px;">现在已经跑了<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">5 + 1 + 1</code> = <code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">7</code>次</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-51b2e861b3db4eddb5432bde46e15803" style="box-sizing: border-box; margin-block: 0px; outline: 0px; margin: 1em 0px; max-width: 100%; min-width: 100%; align-self: center; display: flex; flex-direction: column;"><div style="box-sizing: border-box; margin-block: 0px; outline: 0px; position: relative; display: flex; justify-content: center; align-self: center; width: 754.406px; max-width: 100%; flex-direction: column;"><img src="https://www.notion.so/image/https%3A%2F%2Ftva1.sinaimg.cn%2Flarge%2F0081Kckwly1gls7ok26wbj31ki0u01kx.jpg?table=block&amp;id=51b2e861-b3db-4edd-b543-2bde46e15803&amp;cache=v2" loading="lazy" alt="notion image" decoding="async" class="medium-zoom-image" style="box-sizing: border-box; margin-block: 0px; outline: 0px; border-radius: 0px; cursor: zoom-in; transition: transform 0.3s cubic-bezier(0.2, 0, 0.2, 1) 0s !important; width: 754.406px; height: 400.562px; max-height: 100%;"></div></figure></div></details> <h3 id="烧香确定时间问题"><a href="#烧香确定时间问题" class="headerlink" title="烧香确定时间问题"></a><strong>烧香确定时间问题</strong></h3><p>有两根不均匀的香，燃烧完都需要一个小时，问怎么确定<code>**15**</code>分钟的时长？</p><details class="notion-toggle notion-block-cb07f82aa6a94d868e60ae500215f6ba" open="" style="box-sizing: border-box; margin-block: 0px; outline: 0px; padding: 3px 2px;"><summary style="box-sizing: border-box; margin-block: 0px; outline: none; cursor: pointer; color: var(--theme-color,#42b983); font-weight: 700; font-size: 20px !important;"></summary><div style="box-sizing: border-box; margin-block: 0px; outline: 0px; margin-left: 1.1em;"><div class="notion-text notion-block-5151c7694fb148e88fb9024a3f872322" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 754.406px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 2px 0px 1px;">相对时间的思路。</div><div class="notion-text notion-block-4f63211df93b4d409c9bf1beaef5157f" style="box-sizing: border-box; margin-block: 0px; outline: 0px; width: 754.406px; white-space: pre-wrap; word-break: break-word; padding: 0.5em 2px; margin: 1px 0px;">答：设两根香分别为<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">A</code>、<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">B</code>，先把<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">A</code>一端点燃，然后把<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">B</code>的两端都点燃，这样当<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">B</code>烧完的时候，<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">A</code>就还剩下一半（此时能确定半小时），此时把<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">A</code>的另一端也点燃，那么从此刻到<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">A</code>烧完的时间就是<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">15</code>分钟。</div></div></details><h3 id="掰巧克力问题"><a href="#掰巧克力问题" class="headerlink" title="掰巧克力问题"></a><strong>掰巧克力问题</strong></h3><ul><li><p><code>**N\*M**</code>块巧克力，每次掰一块的一行或一列，掰成<code>**1\*1**</code>的巧克力需要多少次？</p></li><li><p>淘汰问题：<code>**1000**</code>个人参加辩论赛，<code>**1V1**</code>，输了就退出，需要安排多少场比赛？</p></li></ul><details class="notion-toggle notion-block-d316cb3e17df4ef5b893c8cbceecfe8a" open="" style="box-sizing: border-box; margin-block: 0px; outline: 0px; padding: 3px 2px;"><summary style="box-sizing: border-box; margin-block: 0px; outline: none; cursor: pointer; color: var(--theme-color,#42b983); font-weight: 700; font-size: 20px !important;"></summary><div style="box-sizing: border-box; margin-block: 0px; outline: 0px; margin-left: 1.1em;"><ul class="notion-list notion-list-disc notion-block-4a1e12fac6fd444b99d4dac55bbc89c2" style="box-sizing: border-box; margin-block: 0.6em; outline: 0px; margin: 0px; list-style-type: disc; padding-inline-start: 1.7em;"><li style="box-sizing: border-box; margin-block: 0px; outline: 0px; padding: 6px 0px; white-space: pre-wrap;">每次拿起一块巧克力，掰一下（无论横着还是竖着）都会变成两块，因为所有的巧克力共有<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">N*M</code>块，所以要掰<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">N*M-1</code>次，减<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">1</code>是因为最开始的一块是不用算进去的。</li></ul><ul class="notion-list notion-list-disc notion-block-711c2fcd7981497b93e37d1301d5bc2a" style="box-sizing: border-box; margin-block: 0.6em; outline: 0px; margin: 0px; list-style-type: disc; padding-inline-start: 1.7em;"><li style="box-sizing: border-box; margin-block: 0px; outline: 0px; padding: 6px 0px; white-space: pre-wrap;">每一场辩论赛两个人，淘汰一个人，所以可以看作是每一场辩论赛减少一个人，直到最后剩下<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">1</code>个人，所以是<code class="notion-inline-code" style="box-sizing: border-box; margin-block: 0px; outline: 0px; color: rgb(255, 64, 129); padding: 0.2em 0.4em !important; background: rgba(55, 53, 47, 0.1) !important; border-radius: 3px; font-size: 13.6px; font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; border: 0px !important; box-shadow: none !important;">1000 - 1 = 999</code>场。</li></ul></div></details>]]></content>
      
      
      <categories>
          
          <category> 校招 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 智力题 </tag>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Axios使用</title>
      <link href="/Axios%E4%BD%BF%E7%94%A8/"/>
      <url>/Axios%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Axios使用"><a href="#Axios使用" class="headerlink" title="Axios使用"></a>Axios使用</h1><h2 id="Axios介绍"><a href="#Axios介绍" class="headerlink" title="Axios介绍"></a>Axios介绍</h2><p>Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。</p><p>首先需要知道：axios不是一种新的技术，axios 是一个基于Promise 用于浏览器和 nodejs 的 HTTP 客户端，本质上也是对原生XHR的封装，只不过它是Promise的实现版本，符合最新的ES规范，有以下特点：</p><ul><li>从浏览器中创建 XMLHttpRequests</li><li>从 node.js 创建 http 请求</li><li>支持 Promise API</li><li>拦截请求和响应</li><li>转换请求数据和响应数据</li><li>取消请求</li><li>自动转换 JSON 数据</li><li>客户端支持防御 XSRF</li></ul><h2 id="安装方式"><a href="#安装方式" class="headerlink" title="安装方式"></a>安装方式</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install axios</span></span><br></pre></td></tr></table></figure><p>或通过标签引入：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>执行 <code>GET</code> 请求</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 为给定 ID 的 user 创建请求</span></span><br><span class="line">axios.get(<span class="string">&#x27;/user?ID=12345&#x27;</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面的请求也可以这样做</span></span><br><span class="line">axios.get(<span class="string">&#x27;/user&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">      <span class="attr">ID</span>: <span class="number">12345</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>执行 <code>POST</code> 请求</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.post(<span class="string">&#x27;/user&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&#x27;Fred&#x27;</span>,</span><br><span class="line">    <span class="attr">lastName</span>: <span class="string">&#x27;Flintstone&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>可以通过向 <code>axios</code> 传递相关配置来创建请求</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 发送 POST 请求</span></span><br><span class="line">axios(&#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;/user/12345&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&#x27;Fred&#x27;</span>,</span><br><span class="line">    <span class="attr">lastName</span>: <span class="string">&#x27;Flintstone&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>中文文档：<a href="http://www.axios-js.com/zh-cn/docs/">http://www.axios-js.com/zh-cn/docs/</a></p><h2 id="与Vue整合"><a href="#与Vue整合" class="headerlink" title="与Vue整合"></a>与Vue整合</h2><p>在实际项目开发中，几乎每个组件中都会用到 axios 发起数据请求。此时会遇到如下两个问题：</p><ul><li>每个组件中都需要导入 axios（代码臃肿）</li><li>每次发请求都需要填写完整的请求路径（不利于后期的维护）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20220213112222585.png" alt="image-20220213112222585"></p><p>可以通过全局配置的方式解决上述问题：</p><p>在 main.js 入口文件中，通过 app.config.globalProperties 全局挂载 axios，示例代码如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入axios库</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = createApp(App)</span><br><span class="line"><span class="comment">// 配置请求根路径</span></span><br><span class="line">axios.defaults.baseURL = <span class="string">&#x27;http://api.com&#x27;</span></span><br><span class="line"><span class="comment">// 将axios作为全局的自定义属性，每个组件可以在内部直接访问</span></span><br><span class="line">app.config.globalProperties.$http = axios</span><br><span class="line"></span><br><span class="line">app.mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20220213112710961.png" alt="image-20220213112710961"></p><h1 id="前后端分离例子"><a href="#前后端分离例子" class="headerlink" title="前后端分离例子"></a>前后端分离例子</h1><h2 id="axios配置"><a href="#axios配置" class="headerlink" title="axios配置"></a>axios配置</h2><h3 id="需显示数据的页面-TChart7-vue"><a href="#需显示数据的页面-TChart7-vue" class="headerlink" title="需显示数据的页面(TChart7.vue)"></a>需显示数据的页面(TChart7.vue)</h3><h4 id="引入axios"><a href="#引入axios" class="headerlink" title="引入axios"></a>引入axios</h4><pre><code>import axios from &quot;axios&quot;;</code></pre><h4 id="建立连接-传递数据"><a href="#建立连接-传递数据" class="headerlink" title="建立连接 传递数据"></a>建立连接 传递数据</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.post(<span class="string">&quot;http://127.0.0.1:5000/TChart7.json&quot;</span>).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;<span class="comment">//与对应端口建立连接</span></span><br><span class="line">    <span class="built_in">this</span>.tChart7 = response.data;      <span class="comment">// 接受数据</span></span><br><span class="line">    myChart.setOption(&#123;  <span class="comment">//重新调用显示图表函数，解决axios异步导致echart图像先渲染而数据没导入的问题</span></span><br><span class="line">                    <span class="attr">series</span>: [&#123;</span><br><span class="line">                    <span class="attr">data</span>: <span class="built_in">this</span>.tChart7 <span class="comment">// 将数据放入</span></span><br><span class="line">                    &#125;]</span><br><span class="line">                &#125;)</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;tchart7&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 600px; height: 400px&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;tc7&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> cdw <span class="keyword">from</span> <span class="string">&quot;../../../../assets/theme/cdw.json&quot;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> * <span class="keyword">as</span> echarts <span class="keyword">from</span> <span class="string">&quot;echarts&quot;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="attr">tChart7</span>: <span class="literal">null</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>: <span class="string">&quot;tchart7&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="function"><span class="title">myEcharts</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">// 基于准备好的dom，初始化echarts实例</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">let</span> obj = cdw;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      echarts.registerTheme(<span class="string">&#x27;cdw&#x27;</span>, obj)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">//var myChart = this.$echarts.init(document.getElementById(&#x27;chart3&#x27;));</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">var</span> myChart = echarts.init(<span class="built_in">this</span>.$refs.tc7,<span class="string">&#x27;cdw&#x27;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">// 指定图表的配置项和数据</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">var</span> option = &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">title</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="attr">text</span>: <span class="string">&quot;指标分析&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="attr">textStyle</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">fontSize</span>: <span class="number">25</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">color</span>: <span class="string">&quot;#ffffff&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">tooltip</span>: &#123;&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">legend</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="attr">data</span>: [<span class="string">&quot;百分比&quot;</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">xAxis</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="attr">data</span>: [<span class="string">&quot;空间&quot;</span>, <span class="string">&quot;操控&quot;</span>, <span class="string">&quot;外观&quot;</span>, <span class="string">&quot;内饰&quot;</span>, <span class="string">&quot;舒适性&quot;</span>, <span class="string">&quot;性价比&quot;</span>],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="attr">nameTextStyle</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">color</span>: <span class="string">&quot;rgba(255, 255, 255, 1)&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//   [66, 23, 52, 77, 37, 90],</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">yAxis</span>: &#123;&#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="attr">series</span>: [</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">name</span>: <span class="string">&quot;百分比&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">type</span>: <span class="string">&quot;bar&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">data</span>: [],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">showBackground</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">backgroundStyle</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">              <span class="attr">color</span>: <span class="string">&quot;rgba(180, 180, 180, 0.2)&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">            <span class="attr">color</span>: <span class="string">&quot;#44fdc5&quot;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        ],</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="comment">// 使用刚指定的配置项和数据显示图表。</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      myChart.setOption(option);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      axios.post(<span class="string">&quot;http://127.0.0.1:5000/TChart7.json&quot;</span>).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">this</span>.tChart7 = response.data;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        myChart.setOption(&#123;  <span class="comment">//动画的配置</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        <span class="attr">series</span>: [&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        <span class="attr">data</span>: <span class="built_in">this</span>.tChart7 <span class="comment">//这里数据是一个数组的形似</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">                        &#125;]</span></span></span><br><span class="line"><span class="javascript"><span class="xml">                    &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">this</span>.myEcharts();</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>​        </p><h3 id="python文件（app-py）"><a href="#python文件（app-py）" class="headerlink" title="python文件（app.py）"></a>python文件（app.py）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"><span class="keyword">from</span> flask_cors <span class="keyword">import</span> cross_origin, CORS</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">app = Flask(__name__, static_folder=<span class="string">&quot;http&quot;</span>, static_url_path=<span class="string">&quot;/pages&quot;</span>)</span><br><span class="line">CORS(app, supports_credentials=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/TChart7.json&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>]</span>)  </span></span><br><span class="line"><span class="meta">@cross_origin(<span class="params">supports_credentials=<span class="literal">True</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handleTChart7Request</span>():</span></span><br><span class="line">    data = [<span class="number">66</span>, <span class="number">23</span>, <span class="number">52</span>, <span class="number">77</span>, <span class="number">37</span>, <span class="number">90</span>]     // 放入数据</span><br><span class="line">    <span class="built_in">print</span>(json.dumps(data))</span><br><span class="line">    <span class="keyword">return</span> json.dumps(data)</span><br><span class="line"></span><br><span class="line">app.run(port=<span class="string">&quot;5000&quot;</span>)                    // 设置端口（需和网页端口不同）</span><br></pre></td></tr></table></figure><h3 id="json文件（TChart7-json）"><a href="#json文件（TChart7-json）" class="headerlink" title="json文件（TChart7.json）"></a>json文件（TChart7.json）</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;data&quot;</span>: [</span><br><span class="line">        <span class="number">66</span>, </span><br><span class="line">        <span class="number">23</span>, </span><br><span class="line">        <span class="number">52</span>, </span><br><span class="line">        <span class="number">77</span>, </span><br><span class="line">        <span class="number">37</span>, </span><br><span class="line">        <span class="number">90</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 客户端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 客户端 </tag>
            
            <tag> Axios </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue基础入门</title>
      <link href="/Vue%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
      <url>/Vue%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="vue-简介"><a href="#vue-简介" class="headerlink" title="vue 简介"></a>vue 简介</h1><h2 id="什么是-vue"><a href="#什么是-vue" class="headerlink" title="什么是 vue"></a>什么是 vue</h2><p>Vue (读音 /vjuː/，类似于 <strong>view</strong>) 是一套用于构建用户界面的<strong>渐进式框架</strong>。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p><h3 id="构建用户界面"><a href="#构建用户界面" class="headerlink" title="构建用户界面"></a><strong>构建用户界面</strong></h3><p>前端开发者最主要的工作，就是为网站的使用者（又称为：网站的用户）构建出美观、舒适、好用的网页。</p><p>构建用户界面可分为以下大部分：</p><ul><li>编写结构，基于 HTML 超文本标记语言，搭建出网页的内容结构。</li><li>美化样式，基于CSS 样式，美化网页的可视化效果。</li><li>处理交互，基于 Javascript 来操作网页中的 DOM 对象，处理用户和网页之间的交互行为。</li></ul><h3 id="构建用户界面的传统方式"><a href="#构建用户界面的传统方式" class="headerlink" title="构建用户界面的传统方式"></a><strong>构建用户界面的传统方式</strong></h3><p>在传统的 Web 前端开发中，是基于 jQuery + 模板引擎 的方式来构建用户界面的。</p><ul><li>编写结构，基于模板引擎技术，把数据渲染到页面上，初步解放了前端开发者，从此不用手动拼接字符串来渲染网页结构了，但需要定义大量的模板结构，数据变化时需要重新调用模板编译的函数，否则页面结构不会更新；</li><li>美化样式，基于CSS 样式，美化网页的可视化效果。</li><li>处理交互，基于 jQuery 技术，处理用户和网页之间的交互行为，屏蔽了 DOM API 之间的兼容性，提高了 DOM 操作的效率和体验，当业务复杂时、数据变化频繁时，前端程开发者需要把大量的时间和精力浪费在 DOM的操作上，而不是核心业务的处理上。</li></ul><h3 id="使用-vue-构建用户界面"><a href="#使用-vue-构建用户界面" class="headerlink" title="使用 vue 构建用户界面"></a><strong>使用 vue 构建用户界面</strong></h3><p>使用 vue 构建用户界面，解决了 jQuery + 模板引擎 的诸多痛点，极大的提高了前端开发的效率和体验</p><ul><li>编写结构，基于 vue 中提供的指令，可以方便快捷的渲染页面的结构，数据驱动视图（只要页面依赖的数据源变化，则页面自动重新渲染）</li><li>美化样式，基于CSS 样式，美化网页的可视化效果。</li><li>处理交互，基于 vue 中提供的事件绑定，可以轻松处理用户和页面之间的交互行为。</li></ul><p>官方给 vue 的定位是前端框架，因为它提供了构建用户界面的一整套解决方案（俗称 vue 全家桶）：</p><ul><li><p>vue（核心库）</p></li><li><p>vue-router（路由方案）</p></li><li><p>vuex（状态管理方案）</p></li><li><p>vue 组件库（快速搭建页面 UI 效果的方案）</p></li></ul><p>辅助 vue 项目开发的一系列工具：</p><ul><li><p>vue-cli（npm 全局包：一键生成工程化的 vue 项目 - 基于 webpack）</p></li><li><p>vue-devtools（浏览器插件：辅助调试的工具）</p></li><li><p>vetur（vscode 插件：提供语法高亮和智能提示）</p></li></ul><h2 id="vue-的特性"><a href="#vue-的特性" class="headerlink" title="vue 的特性"></a>vue 的特性</h2><p>vue 框架的特性，主要体现在如下两方面：</p><ul><li>数据驱动视图</li><li>双向数据绑定</li></ul><h3 id="数据驱动视图"><a href="#数据驱动视图" class="headerlink" title="数据驱动视图"></a><strong>数据驱动视图</strong></h3><p>在使用了 vue 的页面中，vue 会监听数据的变化，从而自动重新渲染页面的结构。示意图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image123.png"></p><p>注意，数据驱动视图是单向的数据绑定。</p><h3 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a><strong>双向数据绑定</strong></h3><p>在填写表单时，双向数据绑定可以辅助开发者在不操作 DOM 的前提下，自动把用户填写的内容同步到数据源中，开发者不再需要手动操作 DOM 元素，来获取表单元素最新的值。示意图如下：</p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20220212205809167.png" alt="image-20220212205809167" style="zoom:90%;" /><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image28.png" alt="image-20220212205911538" style="zoom:80%;" /><h3 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a><strong>MVVM</strong></h3><p>MVVM 是 vue 实现数据驱动视图和双向数据绑定的核心原理。它把每个 HTML 页面都拆分成了如下三个部分：</p><p>在 MVVM 概念中：</p><ul><li><p>View 表示当前页面所渲染的 DOM 结构。</p></li><li><p>Model 表示当前页面渲染时所依赖的数据源，</p></li><li><p>ViewModel 表示 vue 的实例，它是 MVVM 的核心。</p></li></ul><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image22.png" alt="image-20220212210112022" style="zoom:80%;" /><h3 id="MVVM-的工作原理"><a href="#MVVM-的工作原理" class="headerlink" title="MVVM 的工作原理"></a><strong>MVVM 的工作原理</strong></h3><p>ViewModel 作为 MVVM 的核心，是它把当前页面的数据源（Model）和页面的结构（View）连接在了一起。</p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20220212210234849.png" alt="image-20220212210234849" style="zoom:80%;" /><ul><li>当数据源发生变化时，会被 ViewModel 监听到，VM 会根据最新的数据源自动更新页面的结构</li><li>当表单元素的值发生变化时，也会被 VM 监听到，VM 会把变化过后最新的值自动同步到 Model 数据源中</li></ul><h3 id="vue-的版本"><a href="#vue-的版本" class="headerlink" title="vue 的版本"></a><strong>vue 的版本</strong></h3><p>当前，vue 共有 3 个大版本，其中：</p><ul><li>1.x 版本的 vue 几乎被淘汰，不再建议学习与使用。</li><li>2.x 版本的 vue 是目前企业级项目开发中的主流版本，在未来会被逐渐淘汰。</li><li>3.x 版本的 vue 于 2020-09-19 发布，生态还不完善，尚未在企业级项目开发中普及和推广，是未来企业级项目开发的趋势。</li></ul><h3 id="vue3-x-和-vue2-x-版本的对比"><a href="#vue3-x-和-vue2-x-版本的对比" class="headerlink" title="vue3.x 和 vue2.x 版本的对比"></a><strong>vue3.x 和 vue2.x 版本的对比</strong></h3><p>vue2.x 中绝大多数的 API 与特性，在 vue3.x 中同样支持。同时，vue3.x 中还新增了 3.x 所特有的功能、并废弃了某些 2.x 中的旧功能：</p><p>新增的功能例如：组合式 API、多根节点组件、更好的 TypeScript 支持等</p><p>废弃的旧功能如下：过滤器、不再支持 $on，$off 和 $once 实例方法等</p><h2 id="基本使用步骤"><a href="#基本使用步骤" class="headerlink" title="基本使用步骤"></a>基本使用步骤</h2><ol><li>导入 vue.js 的 script 脚本文件</li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@next&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>在页面中声明一个将要被 vue 所控制的 DOM 区域，既MVVM中的View</li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; message &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>创建 vm 实例对象（vue 实例对象）</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> hello = &#123;</span><br><span class="line">    <span class="comment">// 指定数据源，既MVVM中的Model</span></span><br><span class="line">    <span class="attr">data</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">message</span>: <span class="string">&#x27;Hello Vue!&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> app = Vue.createApp(hello)</span><br><span class="line">app.mount(<span class="string">&#x27;#app&#x27;</span>) <span class="comment">// 指定当前vue实例要控制页面的哪个区域##</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 Front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬取Bilibili排行榜</title>
      <link href="/%E7%88%AC%E5%8F%96Bilibili%E6%8E%92%E8%A1%8C%E6%A6%9C/"/>
      <url>/%E7%88%AC%E5%8F%96Bilibili%E6%8E%92%E8%A1%8C%E6%A6%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="爬取哔哩哔哩排行榜信息"><a href="#爬取哔哩哔哩排行榜信息" class="headerlink" title="爬取哔哩哔哩排行榜信息"></a>爬取哔哩哔哩排行榜信息</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><div class="note warning"><p>这是作者的一个Python通选课的小项目（有些粗糙）</p></div><p><strong>本项目参考自：</strong><a href="https://blog.csdn.net/Jacompol">三秋树&amp;二月花</a></p><p><strong>原项目爬取时间为<span class='p inline-tag t-blue'>2020.12</span>，B站排行榜源码已发生改变，目前已无法爬取。</strong></p><p><strong>本项目爬取时间为<span class='p inline-tag t-red'>2021.12</span></strong> </p><p><strong>项目源码：</strong> <a href="https://github.com/chenduowen233/Py-Bilibili">https://github.com/chenduowen233/Py-Bilibili</a></p><p>通过爬取哔哩哔哩排行榜，支持获取并分析番剧、国产动画、纪录片、电视剧等排行榜的排名、更新话数、播放量、平均每话播放量、追番人数等数据，并绘制出可视化视图。</p><h2 id="数据爬取"><a href="#数据爬取" class="headerlink" title="数据爬取"></a>数据爬取</h2><p><strong>爬取网页网址：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 国产动画排行榜分析</span></span><br><span class="line"><span class="comment"># url = &#x27;https://www.bilibili.com/v/popular/rank/guochan&#x27;</span></span><br><span class="line"><span class="comment"># 番剧排行榜分析</span></span><br><span class="line">url = <span class="string">&#x27;https://www.bilibili.com/v/popular/rank/bangumi&#x27;</span></span><br><span class="line"><span class="comment"># 电视剧排行榜分析</span></span><br><span class="line"><span class="comment"># url = &#x27;https://www.bilibili.com/v/popular/rank/tv&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>使用<code>requests.get</code>来获取网页数据：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">requests.get(url) </span><br></pre></td></tr></table></figure><h2 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a>数据清洗</h2><h3 id="构建BeautifulSoup实例"><a href="#构建BeautifulSoup实例" class="headerlink" title="构建BeautifulSoup实例"></a><strong>构建BeautifulSoup实例</strong></h3><p><strong>解析网页 指定<code>BeautifulSoup</code>的解析器：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">soup = BeautifulSoup(html, <span class="string">&#x27;html.parser&#x27;</span>) </span><br></pre></td></tr></table></figure><h3 id="初始化要存入信息的容器"><a href="#初始化要存入信息的容器" class="headerlink" title="初始化要存入信息的容器"></a><strong>初始化要存入信息的容器</strong></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = []    <span class="comment"># 动漫名字</span></span><br><span class="line">hua = []     <span class="comment"># 更新话数</span></span><br><span class="line">bfl = []     <span class="comment"># 播放量</span></span><br><span class="line">zf = []      <span class="comment"># 追番数</span></span><br><span class="line">pjbfl = []   <span class="comment"># 平均每话播放量</span></span><br></pre></td></tr></table></figure><h3 id="数据解析与提取"><a href="#数据解析与提取" class="headerlink" title="数据解析与提取"></a><strong>数据解析与提取</strong></h3><p><strong>使用<code>beautifulsoup</code>的<code>find_all()</code> 解析数据</strong></p><p><strong><code>find_all()</code>的第一个参数是标签名，第二个是标签中的<code>class</code>值</strong></p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20211209145205454.png" alt="image-20211209145205454"></p><p><strong>使用正则表达式提取所需数据</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br></pre></td></tr></table></figure><p><strong>提取剧名：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> tag <span class="keyword">in</span> soup.find_all(<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&#x27;info&#x27;</span>):</span><br><span class="line">    <span class="comment"># print(tag)</span></span><br><span class="line">    bf = tag.a.string</span><br><span class="line">    name.append(<span class="built_in">str</span>(bf))</span><br><span class="line"><span class="built_in">print</span>(name)</span><br></pre></td></tr></table></figure><p><strong>提取更新话数：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> tag <span class="keyword">in</span> soup.find_all(<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&#x27;detail&#x27;</span>):</span><br><span class="line">  bf = tag.find(<span class="string">&#x27;span&#x27;</span>, class_=<span class="string">&#x27;data-box&#x27;</span>).get_text()</span><br><span class="line">  bf = <span class="built_in">float</span>(re.search(<span class="string">r&#x27;\d*(\.)?\d&#x27;</span>, bf).group())</span><br><span class="line">  hua.append(<span class="built_in">float</span>(bf))</span><br><span class="line"><span class="built_in">print</span>(hua)</span><br></pre></td></tr></table></figure><p><strong>提取播放量：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> tag <span class="keyword">in</span> soup.find_all(<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&#x27;detail-state&#x27;</span>):</span><br><span class="line">    bf = tag.find(<span class="string">&#x27;span&#x27;</span>, class_=<span class="string">&#x27;data-box&#x27;</span>).get_text()</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;亿&#x27;</span> <span class="keyword">in</span> bf:</span><br><span class="line">        num = <span class="built_in">float</span>(re.search(<span class="string">r&#x27;\d(.\d)?&#x27;</span>, bf).group()) * <span class="number">10000</span></span><br><span class="line">        bf = num</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        bf = re.search(<span class="string">r&#x27;\d*(\.)?\d&#x27;</span>, bf).group()</span><br><span class="line">    bfl.append(<span class="built_in">float</span>(bf))</span><br><span class="line"><span class="built_in">print</span>(bfl)</span><br></pre></td></tr></table></figure><p><strong>提取追番人数：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> tag <span class="keyword">in</span> soup.find_all(<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&#x27;detail-state&#x27;</span>):</span><br><span class="line">    bf = tag.find(<span class="string">&#x27;span&#x27;</span>, class_=<span class="string">&#x27;data-box&#x27;</span>).next_sibling.next_sibling.get_text()</span><br><span class="line">    bf = re.search(<span class="string">r&#x27;\d*(\.)?\d&#x27;</span>, bf).group()</span><br><span class="line">    zf.append(<span class="built_in">float</span>(bf))</span><br><span class="line"><span class="built_in">print</span>(zf)</span><br></pre></td></tr></table></figure><p><strong><code>.next_sibling</code>是用于提取同级别的相同标签信息</strong></p><h2 id="数据分析与统计"><a href="#数据分析与统计" class="headerlink" title="数据分析与统计"></a>数据分析与统计</h2><h3 id="引入numpy："><a href="#引入numpy：" class="headerlink" title="引入numpy："></a><strong>引入<code>numpy</code>：</strong></h3><p><strong>由<a href="https://so.csdn.net/so/search?from=pc_blog_highlight&q=%E5%A4%9A%E7%BB%B4%E6%95%B0%E7%BB%84">多维数组</a>对象和用于处理数组的例程集合组成的库</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><p><strong>利用 <code>np.divide</code> 将数组对应相除求出平均每话的播放量:</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pjbfl = np.divide(bfl, hua)</span><br></pre></td></tr></table></figure><h2 id="文件存储"><a href="#文件存储" class="headerlink" title="文件存储"></a>文件存储</h2><p><strong>存储方式：<code>.txt</code>：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/wps8D58.tmp.jpg" alt="img"> </p><p><strong>将解析后的数据存入文本文件：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./data/B_data.txt&#x27;</span>, <span class="string">&#x27;r+&#x27;</span>, encoding=<span class="string">&#x27;UTF-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">  f.write(soup.text)</span><br></pre></td></tr></table></figure><p><strong>解析后的数据：</strong> <img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20211209144339958.png" alt="image-20211209144339958"></p><p><strong>存储方式：<code>.xlsx</code>:</strong></p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/wps8D59.tmp.jpg" alt="img"> </p><p><strong>将提取后的数据存入Bilibili.xlsx文件：</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dm_file = pandas.DataFrame(info)</span><br><span class="line">dm_file.to_excel(<span class="string">&#x27;Bilibili.xlsx&#x27;</span>, sheet_name=<span class="string">&quot;动漫数据分析&quot;</span>)</span><br></pre></td></tr></table></figure><p> <strong>番剧排行榜：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/wps8D5A.tmp.jpg" alt="img"></p><p><strong>电视剧排行榜：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/wps8D5B.tmp.jpg" alt="img"></p><h2 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h2><h3 id="采用Matplotlib进行可视化"><a href="#采用Matplotlib进行可视化" class="headerlink" title="采用Matplotlib进行可视化"></a><strong>采用<code>Matplotlib</code>进行可视化</strong></h3><p><strong><code>Matplotlib</code>是一个在 <code>python</code> 下实现的类 <code>matlab</code> 的纯 <code>python</code> 的第三方库。</strong></p><p><strong>绘图示例:</strong>        <a href="https://matplotlib.org/stable/gallery/index">https://matplotlib.org/stable/gallery/index</a></p><p><strong>PDF版本示例:</strong>   <a href="https://github.com/matplotlib/cheatsheets">https://github.com/matplotlib/cheatsheets</a></p><h3 id="设置中文字体："><a href="#设置中文字体：" class="headerlink" title="设置中文字体："></a><strong>设置中文字体：</strong></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_font = font_manager.FontProperties(fname=<span class="string">&#x27;./data/STHeiti Medium.ttc&#x27;</span>) </span><br></pre></td></tr></table></figure><h3 id="绘制图形，实现数据可视化分析："><a href="#绘制图形，实现数据可视化分析：" class="headerlink" title="绘制图形，实现数据可视化分析："></a><strong>绘制图形，实现数据可视化分析：</strong></h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fig, ax1 = plt.subplots()</span><br><span class="line">ax1.stem(dm_name, dm_play)</span><br><span class="line">plt.title(<span class="string">&#x27;播放量数据分析&#x27;</span>, fontproperties=my_font)</span><br><span class="line">ax1.tick_params(labelsize=<span class="number">6</span>)</span><br><span class="line">plt.xticks(rotation=<span class="number">90</span>, color=<span class="string">&#x27;grey&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;播放量（万）&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;番剧名&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="具体绘制实现五种数据可视化分析图："><a href="#具体绘制实现五种数据可视化分析图：" class="headerlink" title="具体绘制实现五种数据可视化分析图："></a><strong>具体绘制实现五种数据可视化分析图：</strong></h3><p><strong>播放量数据分析：</strong> </p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/wps8D5C.tmp.jpg" alt="img"> </p><p><strong>更新话数和播放量数据分析：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/wps8D6C.tmp.jpg" alt="img"> </p><p><strong>平均每话播放量数据分析：</strong>   </p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/wps8D6D.tmp.jpg" alt="img"> </p><p><strong>平均每话播放量数和播放量数分析：</strong> </p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/wps8D6E.tmp.jpg" alt="img"> </p><p><strong>追番人数和播放量数据分析：</strong> </p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/wps8D6F.tmp.jpg" alt="img"> </p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Echart使用</title>
      <link href="/Echart%E4%BD%BF%E7%94%A8/"/>
      <url>/Echart%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>ECharts，缩写来自Enterprise Charts，商业级数据图表，一个纯<a href="https://so.csdn.net/so/search?from=pc_blog_highlight&q=Javascript">Javascript</a>的图表库，可以流畅的运行在PC和移动设备上，兼容当前绝大部分浏览器（IE6/7/8/9/10/11，chrome，firefox，Safari等），底层依赖轻量级的Canvas类库ZRender，提供直观，生动，可交互，可高度个性化定制的数据可视化图表。创新的拖拽重计算、数据视图、值域漫游等特性大大增强了用户体验，赋予了用户对数据进行挖掘、整合的能力。</p><h2 id="常用网址"><a href="#常用网址" class="headerlink" title="常用网址"></a>常用网址</h2><p><strong>在ECharts官网运行编辑实例：</strong></p><p><a href="https://echarts.apache.org/examples/zh/index.html">Examples - Apache ECharts</a></p><p><strong>ECharts<code>option</code>中各参数详细配置项：</strong></p><p>[Documentation - Apache ECharts](<a href="https://echarts.apache.org/zh/option.html#title">Documentation - Apache ECharts</a>)</p><h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20211026211420723.png" alt="image-20211026211420723"></p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="Echart主题设定"><a href="#Echart主题设定" class="headerlink" title="Echart主题设定"></a>Echart主题设定</h3><p><strong>先进入echarts 官网，找到主题下载</strong></p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20211026210603170.png" alt="image-20211026210603170"></p><p><strong>配置好了选择下载，选择JSON版本</strong></p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20211026210749390.png" alt="image-20211026210749390"></p><p><strong>将json文件放入项目文件中并引入</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> cdw <span class="keyword">from</span> <span class="string">&quot;../../../../assets/theme/cdw.json&quot;</span>;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> obj = cdw;</span></span><br><span class="line"><span class="javascript">echarts.registerTheme(<span class="string">&#x27;cdw&#x27;</span>, obj)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> myChart = echarts.init(<span class="built_in">this</span>.$refs.tc7,<span class="string">&#x27;cdw&#x27;</span>);</span></span><br><span class="line"><span class="javascript"><span class="comment">//var myChart = echarts.init(this.$refs.tc7,&#x27;dark&#x27;);  // 也可以直接使用官方主题</span></span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用服务端返回数据的异步加载和更新"><a href="#使用服务端返回数据的异步加载和更新" class="headerlink" title="使用服务端返回数据的异步加载和更新"></a>使用服务端返回数据的异步加载和更新</h3><p><strong>详细请参考官方文档：</strong></p><p><a href="https://echarts.apache.org/zh/tutorial.html#%E5%BC%82%E6%AD%A5%E6%95%B0%E6%8D%AE%E5%8A%A0%E8%BD%BD%E5%92%8C%E6%9B%B4%E6%96%B0">Documentation - Apache ECharts</a></p><p><strong>实例：</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;折线图&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%; height: 500px;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">       <span class="keyword">import</span> * <span class="keyword">as</span> echarts <span class="keyword">from</span> <span class="string">&#x27;echarts&#x27;</span></span></span><br><span class="line"><span class="javascript">       <span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">chartColumn</span>: <span class="literal">null</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">mydata</span>:<span class="literal">null</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">salePrice</span>: <span class="literal">null</span></span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">drawLine</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.chartColumn = echarts.init(</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;折线图&#x27;</span>));</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.chartColumn.setOption(&#123;</span></span><br><span class="line"><span class="javascript">                    </span></span><br><span class="line"><span class="javascript">                <span class="attr">title</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">text</span>: <span class="string">&#x27;汽车价格对比阶梯折线图&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">textStyle</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">fontSize</span>: <span class="number">25</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">color</span>: <span class="string">&#x27;#ffffff&#x27;</span>&#125;</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="attr">tooltip</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">trigger</span>: <span class="string">&#x27;axis&#x27;</span></span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="attr">legend</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">data</span>: [],</span></span><br><span class="line"><span class="javascript">                    <span class="attr">textStyle</span>:&#123;</span></span><br><span class="line"><span class="javascript">                            <span class="attr">color</span>: <span class="string">&#x27;#ffffff&#x27;</span><span class="comment">//字体颜色</span></span></span><br><span class="line"><span class="javascript">                        &#125;,</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="attr">grid</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">left</span>: <span class="string">&#x27;3%&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">right</span>: <span class="string">&#x27;4%&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">bottom</span>: <span class="string">&#x27;3%&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">containLabel</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="attr">toolbox</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">feature</span>: &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="attr">saveAsImage</span>: &#123;&#125;</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="attr">xAxis</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">type</span>: <span class="string">&#x27;category&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">data</span>: []</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="attr">yAxis</span>: &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">type</span>: <span class="string">&#x27;value&#x27;</span></span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="attr">series</span>: [</span></span><br><span class="line"><span class="javascript">                    &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="attr">step</span>: <span class="string">&#x27;start&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="attr">data</span>: []</span></span><br><span class="line"><span class="javascript">                    &#125;,</span></span><br><span class="line"><span class="javascript">                    &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="attr">step</span>: <span class="string">&#x27;middle&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                        <span class="attr">data</span>: []</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                ]</span></span><br><span class="line"><span class="javascript">            &#125;);</span></span><br><span class="line"><span class="javascript">            axios.post(<span class="string">&quot;http://127.0.0.1:5000/carSalePrice.json&quot;</span>).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.salePrice = response.data;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="built_in">this</span>.salePrice)</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.chartColumn.setOption( <span class="comment">//动画的配置 异步加载数据</span></span></span><br><span class="line"><span class="javascript">                        <span class="built_in">this</span>.salePrice</span></span><br><span class="line"><span class="javascript">                    )</span></span><br><span class="line"><span class="javascript">                &#125;);</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 Front-end </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EChart </tag>
            
            <tag> 前端 </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git常用命令清单</title>
      <link href="/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%B8%85%E5%8D%95/"/>
      <url>/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%B8%85%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Git常用命令清单"><a href="#Git常用命令清单" class="headerlink" title="Git常用命令清单"></a>Git常用命令清单</h1><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/git_001.png" alt="img"></p><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><h3 id="git有四个个工作区："><a href="#git有四个个工作区：" class="headerlink" title="git有四个个工作区："></a>git有四个个工作区：</h3><p><strong>工作区（workspace）</strong></p><p><strong>暂存区（index/stage）</strong></p><p><strong>本地仓库（local repository）</strong></p><p><strong>远程仓库（remote repository）</strong></p><h2 id="新建代码库"><a href="#新建代码库" class="headerlink" title="新建代码库"></a>新建代码库</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在当前目录新建一个Git代码库</span></span><br><span class="line">$ git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个目录，将其初始化为Git代码库</span></span><br><span class="line">$ git init [project-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载一个项目和它的整个代码历史</span></span><br><span class="line">$ git <span class="built_in">clone</span> [url]</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示当前的Git配置</span></span><br><span class="line">$ git config --list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑Git配置文件</span></span><br><span class="line">$ git config -e [--global]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置提交代码时的用户信息</span></span><br><span class="line">$ git config [--global] user.name <span class="string">&quot;[name]&quot;</span></span><br><span class="line">$ git config [--global] user.email <span class="string">&quot;[email address]&quot;</span></span><br></pre></td></tr></table></figure><h2 id="增加-删除文件"><a href="#增加-删除文件" class="headerlink" title="增加/删除文件"></a>增加/删除文件</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加指定文件到暂存区</span></span><br><span class="line">$ git add [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加指定目录到暂存区，包括子目录</span></span><br><span class="line">$ git add [dir]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加当前目录的所有文件到暂存区</span></span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加每个变化前，都会要求确认</span></span><br><span class="line"><span class="comment"># 对于同一个文件的多处变化，可以实现分次提交</span></span><br><span class="line">$ git add -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class="line">$ git rm [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class="line">$ git rm --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改名文件，并且将这个改名放入暂存区</span></span><br><span class="line">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure><h2 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 提交暂存区到仓库区</span></span><br><span class="line">$ git commit -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交暂存区的指定文件到仓库区</span></span><br><span class="line">$ git commit [file1] [file2] ... -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交工作区自上次commit之后的变化，直接到仓库区</span></span><br><span class="line">$ git commit -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交时显示所有diff信息</span></span><br><span class="line">$ git commit -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用一次新的commit，替代上一次提交</span></span><br><span class="line"><span class="comment"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span><br><span class="line">$ git commit --amend -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重做上一次commit，并包括指定文件的新变化</span></span><br><span class="line">$ git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出所有本地分支</span></span><br><span class="line">$ git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有远程分支</span></span><br><span class="line">$ git branch -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有本地分支和远程分支</span></span><br><span class="line">$ git branch -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，但依然停留在当前分支</span></span><br><span class="line">$ git branch [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，并切换到该分支</span></span><br><span class="line">$ git checkout -b [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向指定commit</span></span><br><span class="line">$ git branch [branch] [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class="line">$ git branch --track [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到指定分支，并更新工作区</span></span><br><span class="line">$ git checkout [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到上一个分支</span></span><br><span class="line">$ git checkout -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class="line">$ git branch --set-upstream [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并指定分支到当前分支</span></span><br><span class="line">$ git merge [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择一个commit，合并进当前分支</span></span><br><span class="line">$ git cherry-pick [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line">$ git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出所有tag</span></span><br><span class="line">$ git tag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在当前commit</span></span><br><span class="line">$ git tag [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在指定commit</span></span><br><span class="line">$ git tag [tag] [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除本地tag</span></span><br><span class="line">$ git tag -d [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程tag</span></span><br><span class="line">$ git push origin :refs/tags/[tagName]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看tag信息</span></span><br><span class="line">$ git show [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交指定tag</span></span><br><span class="line">$ git push [remote] [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交所有tag</span></span><br><span class="line">$ git push [remote] --tags</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向某个tag</span></span><br><span class="line">$ git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure><h2 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示有变更的文件</span></span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的版本历史</span></span><br><span class="line">$ git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示commit历史，以及每次commit发生变更的文件</span></span><br><span class="line">$ git <span class="built_in">log</span> --<span class="built_in">stat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索提交历史，根据关键词</span></span><br><span class="line">$ git <span class="built_in">log</span> -S [keyword]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个commit之后的所有变动，每个commit占据一行</span></span><br><span class="line">$ git <span class="built_in">log</span> [tag] HEAD --pretty=format:%s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件</span></span><br><span class="line">$ git <span class="built_in">log</span> [tag] HEAD --grep feature</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个文件的版本历史，包括文件改名</span></span><br><span class="line">$ git <span class="built_in">log</span> --follow [file]</span><br><span class="line">$ git whatchanged [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件相关的每一次diff</span></span><br><span class="line">$ git <span class="built_in">log</span> -p [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示过去5次提交</span></span><br><span class="line">$ git <span class="built_in">log</span> -5 --pretty --oneline</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有提交过的用户，按提交次数排序</span></span><br><span class="line">$ git shortlog -sn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件是什么人在什么时间修改过</span></span><br><span class="line">$ git blame [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和工作区的差异</span></span><br><span class="line">$ git diff</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和上一个commit的差异</span></span><br><span class="line">$ git diff --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示工作区与当前分支最新commit之间的差异</span></span><br><span class="line">$ git diff HEAD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示两次提交之间的差异</span></span><br><span class="line">$ git diff [first-branch]...[second-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示今天你写了多少行代码</span></span><br><span class="line">$ git diff --shortstat <span class="string">&quot;@&#123;0 day ago&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交的元数据和内容变化</span></span><br><span class="line">$ git show [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交发生变化的文件</span></span><br><span class="line">$ git show --name-only [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交时，某个文件的内容</span></span><br><span class="line">$ git show [commit]:[filename]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的最近几次提交</span></span><br><span class="line">$ git reflog</span><br></pre></td></tr></table></figure><h2 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载远程仓库的所有变动</span></span><br><span class="line">$ git fetch [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有远程仓库</span></span><br><span class="line">$ git remote -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个远程仓库的信息</span></span><br><span class="line">$ git remote show [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加一个新的远程仓库，并命名</span></span><br><span class="line">$ git remote add [shortname] [url]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取回远程仓库的变化，并与本地分支合并</span></span><br><span class="line">$ git pull [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传本地指定分支到远程仓库</span></span><br><span class="line">$ git push [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class="line">$ git push [remote] --force</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送所有分支到远程仓库</span></span><br><span class="line">$ git push [remote] --all</span><br></pre></td></tr></table></figure><h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 恢复暂存区的指定文件到工作区</span></span><br><span class="line">$ git checkout [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复某个commit的指定文件到暂存区和工作区</span></span><br><span class="line">$ git checkout [commit] [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复暂存区的所有文件到工作区</span></span><br><span class="line">$ git checkout .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class="line">$ git reset [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class="line">$ git reset --hard</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span><br><span class="line">$ git reset [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span><br><span class="line">$ git reset --hard [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class="line">$ git reset --keep [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个commit，用来撤销指定commit</span></span><br><span class="line"><span class="comment"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class="line">$ git revert [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暂时将未提交的变化移除，稍后再移入</span></span><br><span class="line">$ git stash</span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成一个可供发布的压缩包</span></span><br><span class="line">$ git archive</span><br></pre></td></tr></table></figure><h2 id="修改默认仓库账号密码"><a href="#修改默认仓库账号密码" class="headerlink" title="修改默认仓库账号密码"></a>修改默认仓库账号密码</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">控制面板-&gt;用户账户-&gt;凭据管理器-&gt;windows凭据</span><br><span class="line"></span><br><span class="line">删除对应的账号密码</span><br></pre></td></tr></table></figure><p>参考自阮一峰老师：<a href="https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html"> 常用 Git 命令清单 </a></p>]]></content>
      
      
      <categories>
          
          <category> Standard </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Standard </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决仓库分支过多问题</title>
      <link href="/%E8%A7%A3%E5%86%B3%E4%BB%93%E5%BA%93%E5%88%86%E6%94%AF%E8%BF%87%E5%A4%9A%E9%97%AE%E9%A2%98/"/>
      <url>/%E8%A7%A3%E5%86%B3%E4%BB%93%E5%BA%93%E5%88%86%E6%94%AF%E8%BF%87%E5%A4%9A%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\02gaoke\00Practice&gt;git clone http://git.gaokeyun.cn/yangqiang/seu2021_doc.git</span><br><span class="line">Cloning into &#x27;seu2021_doc&#x27;...</span><br><span class="line">remote: Enumerating objects: 632, done.</span><br><span class="line">remote: Counting objects: 100% (632/632), done.</span><br><span class="line">remote: Compressing objects: 100% (596/596), done.</span><br><span class="line">error: RPC failed; curl 56 Recv failure: Connection was reset</span><br><span class="line">fetch-pack: unexpected disconnect while reading sideband packet</span><br><span class="line">fatal: early EOF</span><br><span class="line">fatal: fetch-pack: invalid index-pack output</span><br></pre></td></tr></table></figure><h1 id="原因分析："><a href="#原因分析：" class="headerlink" title="原因分析："></a>原因分析：</h1><pre><code>分支过多导致的问题</code></pre><h1 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h1><h2 id="关闭压缩功能"><a href="#关闭压缩功能" class="headerlink" title="关闭压缩功能"></a>关闭压缩功能</h2><pre><code>C:\02gaoke\00Practice&gt;git config --global core.compression 0</code></pre><h2 id="克隆最近修改的文件"><a href="#克隆最近修改的文件" class="headerlink" title="克隆最近修改的文件"></a>克隆最近修改的文件</h2><pre><code>C:\02gaoke\00Practice&gt;git clone --depth 1  http://git.gaokeyun.cn/yangqiang/seu2021_doc.gitCloning into &#39;seu2021_doc&#39;...remote: Enumerating objects: 3, done.remote: Counting objects: 100% (3/3), done.remote: Total 3 (delta 0), reused 0 (delta 0)Unpacking objects: 100% (3/3), 218 bytes | 19.00 KiB/s, done.</code></pre><h2 id="然后获取完整库"><a href="#然后获取完整库" class="headerlink" title="然后获取完整库"></a>然后获取完整库</h2><pre><code>C:\02gaoke\00Practice&gt;cd seu2021_docC:\02gaoke\00Practice\seu2021_doc&gt;git fetch --unshallowremote: Total 0 (delta 0), reused 0 (delta 0)</code></pre><h2 id="拉取所有数据"><a href="#拉取所有数据" class="headerlink" title="拉取所有数据"></a>拉取所有数据</h2><pre><code>C:\02gaoke\00Practice\seu2021_doc&gt;git pull --allFetching originAlready up to date.</code></pre><h2 id="本地创建分支"><a href="#本地创建分支" class="headerlink" title="本地创建分支"></a>本地创建分支</h2><pre><code>C:\02gaoke\00Practice\seu2021_doc&gt;git branch* masterC:\02gaoke\00Practice\seu2021_doc&gt;git branch yq2021</code></pre><h2 id="切换本地分支"><a href="#切换本地分支" class="headerlink" title="切换本地分支"></a>切换本地分支</h2><pre><code>C:\02gaoke\00Practice\seu2021_doc&gt;git checkout yq2021Switched to branch &#39;yq2021&#39;</code></pre><h2 id="添加到本地库"><a href="#添加到本地库" class="headerlink" title="添加到本地库"></a>添加到本地库</h2><pre><code>C:\02gaoke\00Practice\seu2021_doc&gt;git add *C:\02gaoke\00Practice\seu2021_doc&gt;git commit -m &quot;yq2021&quot;[yq2021 d5cd6e5] yq2021 1 file changed, 1 insertion(+) create mode 100644 &quot;\346\246\202\350\246\201\350\256\276\350\256\241/my.py&quot;</code></pre><h2 id="提交到服务器的分支"><a href="#提交到服务器的分支" class="headerlink" title="提交到服务器的分支"></a>提交到服务器的分支</h2><pre><code>C:\02gaoke\00Practice\seu2021_doc&gt;git push -u origin  yq2021Enumerating objects: 5, done.Counting objects: 100% (5/5), done.Delta compression using up to 12 threadsCompressing objects: 100% (2/2), done.Writing objects: 100% (4/4), 412 bytes | 206.00 KiB/s, done.Total 4 (delta 0), reused 0 (delta 0), pack-reused 0To http://git.gaokeyun.cn/yangqiang/seu2021_doc.git * [new branch]  yq2021 -&gt; yq2021Branch &#39;yq2021&#39; set up to track remote branch &#39;yq2021&#39; from &#39;origin&#39;.</code></pre>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Excel文件导入MySQL workbench</title>
      <link href="/excel%E6%96%87%E4%BB%B6%E5%AF%BC%E5%85%A5%E5%88%B0MySQL%20workbench/"/>
      <url>/excel%E6%96%87%E4%BB%B6%E5%AF%BC%E5%85%A5%E5%88%B0MySQL%20workbench/</url>
      
        <content type="html"><![CDATA[<h1 id="将Excel文件导入到MySQL-workbench中"><a href="#将Excel文件导入到MySQL-workbench中" class="headerlink" title="将Excel文件导入到MySQL workbench中"></a>将Excel文件导入到MySQL workbench中</h1><h2 id="版本说明"><a href="#版本说明" class="headerlink" title="版本说明"></a>版本说明</h2><p><strong>MySQL workbench版本</strong> <span class='p inline-tag t-red'>8.0</span></p><h2 id="将excel文件另存为到桌面，保存类型选择CSV-逗号分隔"><a href="#将excel文件另存为到桌面，保存类型选择CSV-逗号分隔" class="headerlink" title="将excel文件另存为到桌面，保存类型选择CSV(逗号分隔)"></a>将excel文件另存为到桌面，保存类型选择CSV(逗号分隔)</h2><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/20190927130701829.png" alt="img"></p><p><strong>保存完桌面上文件显示为这样的，然后右键打开方式，选择记事本打开</strong></p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/20190927131220596.png"></p><h2 id="记事本显示的数据都有逗号隔开，再另存为，编码选择UTF-8，保存"><a href="#记事本显示的数据都有逗号隔开，再另存为，编码选择UTF-8，保存" class="headerlink" title="记事本显示的数据都有逗号隔开，再另存为，编码选择UTF-8，保存"></a>记事本显示的数据都有逗号隔开，再另存为，编码选择UTF-8，保存</h2><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/20190927131327894.png" alt="在这里插入图片描述"></p><h2 id="打开workbench右键点击数据库中的Tables，点击Table-Data-Import-Wizard"><a href="#打开workbench右键点击数据库中的Tables，点击Table-Data-Import-Wizard" class="headerlink" title="打开workbench右键点击数据库中的Tables，点击Table Data Import Wizard"></a>打开<code>workbench</code>右键点击数据库中的<code>Tables</code>，点击<code>Table Data Import Wizard</code></h2><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/20190927131745455.png" alt="在这里插入图片描述"></p><h2 id="选择桌面上文件的路径"><a href="#选择桌面上文件的路径" class="headerlink" title="选择桌面上文件的路径"></a>选择桌面上文件的路径</h2><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/20190927131848643.png" alt="在这里插入图片描述"></p><h2 id="这里可以将数据导入到已有的数据表中，也可以直接新建表"><a href="#这里可以将数据导入到已有的数据表中，也可以直接新建表" class="headerlink" title="这里可以将数据导入到已有的数据表中，也可以直接新建表"></a>这里可以将数据导入到已有的数据表中，也可以直接新建表</h2><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/20190927131925452.png" alt="在这里插入图片描述"></p><h2 id="一直点下一步，最后完成导入"><a href="#一直点下一步，最后完成导入" class="headerlink" title="一直点下一步，最后完成导入"></a>一直点下一步，最后完成导入</h2><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/20190927131941795.png" alt="在这里插入图片描述"></p><h2 id="最后刷新下数据库表单，Tables中就可以看到导入的数据库表"><a href="#最后刷新下数据库表单，Tables中就可以看到导入的数据库表" class="headerlink" title="最后刷新下数据库表单，Tables中就可以看到导入的数据库表"></a>最后刷新下数据库表单，Tables中就可以看到导入的数据库表</h2><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzU3MzE4Ng==,size_16,color_FFFFFF,t_70.png"></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Butterfly主题美化</title>
      <link href="/Hexo+Butterfly%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/"/>
      <url>/Hexo+Butterfly%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-Butterfly-主题美化"><a href="#Hexo-Butterfly-主题美化" class="headerlink" title="Hexo+Butterfly 主题美化"></a>Hexo+Butterfly 主题美化</h1><h2 id="版本说明"><a href="#版本说明" class="headerlink" title="版本说明"></a>版本说明</h2><p><strong>Butterfly 已经更新到<span class='p inline-tag t-blue'>3.8.4</span>， 目前采用版本为<span class='p inline-tag t-red'>3.8.3</span></strong></p><h3 id="侧边栏电子时钟"><a href="#侧边栏电子时钟" class="headerlink" title="侧边栏电子时钟"></a>侧边栏电子时钟</h3><h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖:"></a>安装依赖:</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install hexo<span class="literal">-butterfly</span><span class="literal">-clock</span> -<span class="literal">-save</span> </span><br></pre></td></tr></table></figure><h4 id="在-config-yml中配置插件"><a href="#在-config-yml中配置插件" class="headerlink" title="在_config.yml中配置插件:"></a>在<code>_config.yml</code>中配置插件:</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># electric_clock</span></span><br><span class="line"><span class="attr">electric_clock:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 开关</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">5</span> <span class="comment">#过滤器优先权</span></span><br><span class="line">  <span class="attr">enable_page:</span> <span class="string">all</span> <span class="comment"># 应用页面</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="comment"># - /posts/</span></span><br><span class="line">    <span class="comment"># - /about/</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="comment"># 挂载容器类型</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">class</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">sticky_layout</span></span><br><span class="line">    <span class="attr">index:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">loading:</span> <span class="string">https://cdn.jsdelivr.net/gh/tzy13755126023/BLOG_SOURCE/theme_f/loading.gif</span> <span class="comment">#加载动画自定义 </span></span><br></pre></td></tr></table></figure><p><strong>效果如下：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210914220124949.png" alt="image-20210914220124949"></p><h3 id="随机背景图"><a href="#随机背景图" class="headerlink" title="随机背景图"></a>随机背景图</h3><div class="note warning"><p>此处需要对源码进行修改，慎重考虑。</p></div><h4 id="授人以渔"><a href="#授人以渔" class="headerlink" title="授人以渔"></a>授人以渔</h4><p>此处参考了<strong>会飞的小弋</strong>的教程，不过他的butterfly版本较低，现今源码已改变，故这里进行梳理。</p><p>通过网页的<code>search</code>功能基本就能锁定到背景页面的css，显然页面是用的<code>id</code>选择器，且<code>id</code>为<code>web_bg</code>，元素为<code>background</code></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#web_bg</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">z-index</span>: -<span class="number">999</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;/img/banner/6.jpg&quot;</span>);</span><br><span class="line">  <span class="attribute">background-attachment</span>: local;</span><br><span class="line">  <span class="attribute">background-position</span>: center;</span><br><span class="line">  -webkit-<span class="attribute">background-size</span>: cover;</span><br><span class="line">  -moz-<span class="attribute">background-size</span>: cover;</span><br><span class="line">  <span class="attribute">background-size</span>: cover;</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过用<code>js</code>的<code>document.getElementById(&#39;web_bg&#39;)</code>发现并不能取到想要的值，是因为此处不是采用的<strong>行内式</strong>，不过既然知道了<code>web_bg</code>参数，就可以进行全局搜索</p><h4 id="修改源码"><a href="#修改源码" class="headerlink" title="修改源码"></a>修改源码</h4><p>在 <code>butterfly/layout/includes/layout.pug</code> 下找到如下代码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">footer#footer(style=footer_bg)</span><br><span class="line">    !=partial(&#x27;includes/footer&#x27;, &#123;&#125;, &#123;cache: true&#125;)</span><br></pre></td></tr></table></figure><p>在其下追加变成，<strong>注意缩进</strong>，<code>script()</code>与上面的<code>!=</code>对齐</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">footer#footer(style=footer_bg)</span><br><span class="line">    !=partial(&#x27;includes/footer&#x27;, &#123;&#125;, &#123;cache: true&#125;)</span><br><span class="line">if !is_post()</span><br><span class="line">    script() var bg_index = Math.floor(Math.random() * #&#123;theme.background_num&#125;);var res = &#x27;background-image: url(&quot;/img/banner/&#x27; + bg_index + &#x27;.jpg&quot;); background-attachment: fixed;&#x27;;document.getElementById(&#x27;web_bg&#x27;).style = res</span><br></pre></td></tr></table></figure><p>这里的<code>if !is_post()</code>表示文章页面不采用随机背景，如果需要随机则可以把这句话删去。文章背景色是采用主题设置中的<code>background</code>值</p><h4 id="添加图片"><a href="#添加图片" class="headerlink" title="添加图片"></a>添加图片</h4><p>在<code>\source\img</code>目录下新建<code>banner</code>文件夹，然后就可以把图片按照<code>0.jpg</code>、<code>1.jpg</code>、<code>2.jpg</code>这个顺序放入，同时在 <code>butterfly/_config.yml</code> 里添加以下内容</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 随机背景图banner的数量</span></span><br><span class="line"><span class="attr">background_num:</span> <span class="number">8</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> 美化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 界面美化 </tag>
            
            <tag> Hexo </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo配置加强版live2d看板娘</title>
      <link href="/Hexo%E9%85%8D%E7%BD%AE%E5%8A%A0%E5%BC%BA%E7%89%88live2d%E7%9C%8B%E6%9D%BF%E5%A8%98/"/>
      <url>/Hexo%E9%85%8D%E7%BD%AE%E5%8A%A0%E5%BC%BA%E7%89%88live2d%E7%9C%8B%E6%9D%BF%E5%A8%98/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo配置加强版live2d看板娘"><a href="#Hexo配置加强版live2d看板娘" class="headerlink" title="Hexo配置加强版live2d看板娘"></a>Hexo配置加强版live2d看板娘</h1><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p><strong>如果已经安装过官方提供的live2d，需要先卸载！</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-helper-live2d</span><br></pre></td></tr></table></figure><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><strong>项目下载地址：<a href="https://github.com/stevenjoezhang/live2d-widget">https://github.com/stevenjoezhang/live2d-widget</a></strong></p><p><strong>下载解压到：<code>themes\butterfly\source\</code>文件夹下</strong></p><h2 id="设置路径"><a href="#设置路径" class="headerlink" title="设置路径"></a>设置路径</h2><p><strong>打开项目目录进入修改autoload.js文件，将live2d_path设为自己的路径，一般为绝对路径：</strong><code>/live2d-widget/</code></p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210826171753095.png" alt="image-20210826171753095"></p><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p><strong>打开butterfly下的layout下的includes目录，点击修改head.pug文件，在文件末尾粘贴：</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">script(src=<span class="string">&#x27;/live2d-widget/autoload.js&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="开启"><a href="#开启" class="headerlink" title="开启"></a>开启</h2><p><strong>在主题配置文件下即butterfly下的_config.yml中添加以下代码：</strong></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 看板娘* </span></span><br><span class="line"><span class="attr">live2d:</span>  </span><br><span class="line"><span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><strong>运行项目就可以在左下角看到一个可换装、可聊天的动态加强版看板娘啦。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210826170620016.png" alt="image-20210826170620016"></p><h2 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h2><h3 id="修改看板娘的位置"><a href="#修改看板娘的位置" class="headerlink" title="修改看板娘的位置"></a><strong>修改看板娘的位置</strong></h3><p><strong>在<code>live2d-widget</code>目录下的<code>waifu.css</code>中的<code>#waifu</code>选择器下修改：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210826170948905.png" alt="image-20210826170948905"></p><h3 id="修改聊天内容"><a href="#修改聊天内容" class="headerlink" title="修改聊天内容"></a><strong>修改聊天内容</strong></h3><p><strong>在<code>live2d-widget</code>文件夹下的<code>waifu-tips.js</code>文件中</strong></p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210826171338176.png" alt="image-20210826171338176"></p><h3 id="修改首次加载的模型"><a href="#修改首次加载的模型" class="headerlink" title="修改首次加载的模型"></a><strong>修改首次加载的模型</strong></h3><p><strong>如果你不喜欢默认的第一个模型，可以指定首次加载的模型。修改<code>modelId</code></strong><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210826171517898.png" alt="image-20210826171517898"></p><h2 id="bug归纳"><a href="#bug归纳" class="headerlink" title="bug归纳"></a>bug归纳</h2><div class="note warning"><p>使用张书樵大神的魔改方案时，<code>Pio酱</code>和<code>Tia酱</code>的模型不能像在其他网站看到的那样可以换装。</p></div><p>这里主要是因为张书樵大神的魔改方案使用的CDN路径是通过接入的<a href="https://github.com/fghrsh/live2d_api">live2d_api仓库</a>的<code>jedelivrCDN</code>链接，根据该项目的<code>model_list.json</code>和指向的<code>model</code>文件夹内的模型的<code>index.json</code>来确定模型资源。而<code>Pio酱</code>和<code>Tia酱</code>的模型装配是配合有后端服务器的API装配方式，依赖于后端生成的<code>textures.cache</code>来获取模型资源。解决方案是将模型装配模式由<code>单模型 多组皮肤</code>转换为<code>同分组 多个模型</code>。</p><details green><summary> 解决方法 </summary>              <div class='content'>              <div class="tabs" id="tab-id"><ul class="nav-tabs"><li class="tab active"><a class="#tab-id-1">懒人配置方案</a></li><li class="tab"><a class="#tab-id-2">更改模型配置方案</a></li><li class="tab"><a class="#tab-id-3">鸣谢</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-id-1"><p>修改张书樵大神的项目内的<code>~\live2d-widget\autoload.js</code>,将模型资源由<code>cdnPath</code>改为<code>apiPath</code>。</p><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">  // 加载 waifu.css live2d.min.js waifu-tips.js</span><br><span class="line">  if (screen.width &gt;= 768) &#123;</span><br><span class="line">  Promise.all([</span><br><span class="line">  loadExternalResource(live2d_path + &quot;waifu.css&quot;, &quot;css&quot;),</span><br><span class="line">  loadExternalResource(live2d_path + &quot;live2d.min.js&quot;, &quot;js&quot;),</span><br><span class="line">  loadExternalResource(live2d_path + &quot;waifu-tips.js&quot;, &quot;js&quot;)</span><br><span class="line">  ]).then(() =&gt; &#123;</span><br><span class="line">  initWidget(&#123;</span><br><span class="line">  waifuPath: live2d_path + &quot;waifu-tips.json&quot;,</span><br><span class="line"><span class="deletion">- //apiPath: &quot;https://live2d.fghrsh.net/api/&quot;,</span></span><br><span class="line"><span class="deletion">-  cdnPath: &quot;https://cdn.jsdelivr.net/gh/fghrsh/live2d_api/&quot;</span></span><br><span class="line"><span class="addition">+ apiPath: &quot;https://live2d.fghrsh.net/api/&quot;,</span></span><br><span class="line"><span class="addition">+  //cdnPath: &quot;https://cdn.jsdelivr.net/gh/fghrsh/live2d_api/&quot;</span></span><br><span class="line">  &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><div class="note warning"><p>这个apiPath就是live2d_widget的原作者<a href="https://www.fghrsh.net/post/123.html">@fghrsh</a>搭建的。但是这个API纯粹是用爱发电的产物，随时可能到期，虽然已经喊了三年了。。。详见<a href="https://www.fghrsh.net/post/170.html">Live2D 看板娘 API 迁移公告</a>，所以最好还是采用<a href="https://github.com/fghrsh/live2d_api">自建api</a>的方式。</p></div></div><div class="tab-pane" id="tab-id-2"><p>上面已经说到过，张书樵大神的魔改方案其实已经实现了<code>本地化API</code>，只是因为模型配置路径不同才导致无法换装的。所以其实只要注意配置模型时，保证每个可以展示的模型都有相应的<code>index.json</code>并且在<code>model_list.json</code>里有相应的模型路径就可以了。</p><p>直接使用配置好的本地化项目的路径：<br>       修改张书樵大神的项目内的<code>~\live2d-widget\autoload.js</code>,修改<code>cdnPath</code>。</p><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">  // 加载 waifu.css live2d.min.js waifu-tips.js</span><br><span class="line">  if (screen.width &gt;= 768) &#123;</span><br><span class="line">  Promise.all([</span><br><span class="line">  loadExternalResource(live2d_path + &quot;waifu.css&quot;, &quot;css&quot;),</span><br><span class="line">  loadExternalResource(live2d_path + &quot;live2d.min.js&quot;, &quot;js&quot;),</span><br><span class="line">  loadExternalResource(live2d_path + &quot;waifu-tips.js&quot;, &quot;js&quot;)</span><br><span class="line">  ]).then(() =&gt; &#123;</span><br><span class="line">  initWidget(&#123;</span><br><span class="line">  waifuPath: live2d_path + &quot;waifu-tips.json&quot;,</span><br><span class="line">  //apiPath: &quot;https://live2d.fghrsh.net/api/&quot;,</span><br><span class="line"><span class="deletion">-  cdnPath: &quot;https://cdn.jsdelivr.net/gh/fghrsh/live2d_api/&quot;</span></span><br><span class="line"><span class="addition">+  cdnPath: &quot;https://live2d-api.vercel.app/&quot;</span></span><br><span class="line">//因为jsdelivr不支持50MB以上的包的加速，可能报403错误，所以用的vercel的CDN服务。</span><br><span class="line">  &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>除了让原有模型换装可用化以为，还顺便添加了<code>和泉纱雾</code>，<code>血小板</code>和<code>香风智乃</code>的模型哦。</p></div><div class="tab-pane" id="tab-id-3"><div class="tag link"><a class="link-card" title="糖果屋教程贴" href="https://akilar.top/posts/615e2dec/"><div class="left"><img src="https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io/img/siteicon/favicon.ico"/></div><div class="right"><p class="text">糖果屋教程贴</p><p class="url">https://akilar.top/posts/615e2dec/</p></div></a></div></div></div></div>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> 美化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 界面美化 </tag>
            
            <tag> Hexo </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora入门</title>
      <link href="/Typora%E5%85%A5%E9%97%A8/"/>
      <url>/Typora%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Typora入门"><a href="#Typora入门" class="headerlink" title="Typora入门"></a>Typora入门</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Typora是一款轻便简洁的Markdown编辑器，支持即时渲染技术，这也是与其他Markdown编辑器最显著的区别。即时渲染使得你写Markdown就想是写Word文档一样流畅自如，不像其他编辑器的有编辑栏和显示栏。</p><ul><li>Typora删除了预览窗口，以及所有其他不必要的干扰。取而代之的是实时预览。</li><li>Markdown的语法因不同的解析器或编辑器而异，Typora使用的是<a href="https://help.github.com/articles/basic-writing-and-formatting-syntax/">GitHub Flavored Markdown</a>。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210819175048608.png" alt="image-20210819175048608"></p><center style="color:#C0C0C0">官网首页</center><h2 id="关于-Markdown"><a href="#关于-Markdown" class="headerlink" title="关于 Markdown"></a>关于 Markdown</h2><p>Markdown 是用来编写结构化文档的一种纯文本格式，它使我们在双手不离开键盘的情况下，可以对文本进行一定程度的格式排版。你可以在 <a href="https://sspai.com/post/36610">这篇文章</a> 中快速入门 Markdown。</p><p>由于目前还没有一个权威机构对 Markdown 的语法进行规范，各应用厂商制作时遵循的 Markdown 语法也是不尽相同的。其中比较受到认可的是 <a href="https://github.github.com/gfm/">GFM 标准</a>，它是由著名代码托管网站 <a href="https://github.com/">GitHub</a> 所制定的。Typora 主要使用的也是 GFM 标准。同时，你还可以在 <code>文件 - 偏好设置 - Markdown 语法偏好 - 严格模式</code> 中将标准设置为「更严格地遵循 GFM 标准」。具体内容你可以在官方的 <a href="http://support.typora.io/Strict-Mode/">这篇文档</a> 中查看。</p><h3 id="语法偏好"><a href="#语法偏好" class="headerlink" title="语法偏好"></a>语法偏好</h3><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210819151516826.png" alt="image-20210819151516826"></p><center style="color:#C0C0C0">严格模式</center><h3 id="智能标点"><a href="#智能标点" class="headerlink" title="智能标点"></a>智能标点</h3><p>我认为「智能标点」是比较有趣的一点。它可以自动帮你将不是很美观的直引号 <code>&quot;</code> <code>&#39;</code> 转化为更美观的弯引号 <code>“</code> <code>‘</code> <code>’</code> <code>”</code>。具体内容你可以在官方的 <a href="http://support.typora.io/SmartyPants/">这篇文档</a> 中查看。关于直弯引号在 macOS 上如何输入你也可以看 <a href="https://sspai.com/post/38342">这篇文章</a>。</p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210819151704847.png" alt="image-20210819151704847"></p><center style="color:#C0C0C0">智能标点</center><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210819173300202.png" alt="image-20210819173300202"></p><center style="color:#C0C0C0">代码块</center><p>Typora 中代码的插入也可以分为行内和块间两种：</p><ol><li>行内代码：用 <code>...</code> 或 <code>...</code> 括起代码，代码会以主题中设置的样式出现在行内，但不会实现代码高亮。</li><li>代码块：输入 ````` 后并输入语言名，换行，开始写代码，Typora 就会自动帮你实现代码高亮。Typora 原生支持许多编程语言代码块的语法高亮，基本日常常用的编程语言它都能很好地支持。<br>除此以外，你也可以直接换行开始写，而后再选择语言。</li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;折线图&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%; height: 500px;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="空格与换行"><a href="#空格与换行" class="headerlink" title="空格与换行"></a>空格与换行</h3><p>Typora 在空格与换行部分主要是使用 <a href="http://www.commonmark.cn/w/">CommonMark</a> 作为标注规范。与前文提到的 GFM 一样，CommonMark 也是比较流行的 Markdown 语言规范（解析器）之一。</p><ul><li><p><strong>空格：</strong>在输入连续的空格后，Typora 会在编辑器视图里为你保留这些空格，但当你打印或导出时，这些空格会被省略成一个。<br>你可以在源代码模式下，为每个空格前加一个 <code>\</code> 转义符，或者直接使用 HTML 风格的 <code>&amp;nbps;</code> 来保持连续的空格。</p></li><li><p><strong>软换行：</strong>需要说明的是，在 Markdown 语法中，换行（line break）与换段是不同的。且换行分为软换行和硬换行。在 Typora 中，你可以通过 <code>Shift + Enter</code> 完成一次软换行。软换行只在编辑界面可见，当文档被导出时换行会被省略。</p></li><li><p><strong>硬换行：</strong>你可以通过 <code>空格 + 空格 + Shift + Enter</code> 完成一次硬换行，而这也是许多 Markdown 编辑器所原生支持的。硬换行在文档被导出时将被保留，且没有换段的段后距。</p></li><li><p><strong>换段：</strong>你可以通过 <code>Enter</code> 完成一次换段。Typora 会自动帮你完成两次 <code>Shift + Enter</code> 的软换行，从而完成一次换段。这也意味着在 Markdown 语法下，换段是通过在段与段之间加入空行来实现的。</p></li><li><p><strong>Windows 风格（CR+LF）与 Unix 风格（CR）的换行符：</strong>CR 表示回车 <code>\r</code> ，即回到一行的开头，而 LF 表示换行 <code>\n</code> ，即另起一行。<br>所以 Windows 风格的换行符本质是「回车 + 换行」，而 Unix 风格的换行符是「换行」。这也是为什么 Unix / Mac 系统下的文件，如果在 Windows 系统直接打开会全部在同一行内。 你可以在 <code>文件 - 偏好设置 - 编辑器 - 默认换行符</code> 中对此进行切换。</p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210819174430348.png" alt="image-20210819174430348"></p></li></ul><center style="color:#C0C0C0">空格与换行</center><p>下附以上各空格、换行、换段的测试结果图。具体内容你可以在官网的 <a href="http://support.typora.io/Line-Break/">这篇文档</a> 中查阅。</p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/5c2fbaa53b27666a7fd0b07ac3e100bf.png" alt="img"></p><h2 id="Typora操作"><a href="#Typora操作" class="headerlink" title="Typora操作"></a>Typora操作</h2><h3 id="Typora快捷键"><a href="#Typora快捷键" class="headerlink" title="Typora快捷键"></a>Typora快捷键</h3><ul><li>加粗： <code>Ctrl + B</code></li><li>标题： <code>Ctrl + H</code></li><li>插入链接： <code>Ctrl + K</code></li><li>插入代码： <code>Ctrl + Shift + C</code>  – 无法执行</li><li>行内代码： <code>Ctrl + Shift + K</code></li><li>插入图片： <code>Ctrl + Shift + I</code></li><li>无序列表：<code>Ctrl + Shift + L</code> – 无法执行</li><li>撤销： <code>Ctrl + Z</code></li></ul><table><thead><tr><th align="left">快捷键</th><th align="left">作用</th><th align="left">快捷键</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">Ctrl+1</td><td align="left">一阶标题</td><td align="left">Ctrl+B</td><td align="left">字体加粗</td></tr><tr><td align="left">Ctrl+2</td><td align="left">二阶标题</td><td align="left">Ctrl+I</td><td align="left">字体倾斜</td></tr><tr><td align="left">Ctrl+3</td><td align="left">三阶标题</td><td align="left">Ctrl+U</td><td align="left">下划线</td></tr><tr><td align="left">Ctrl+4</td><td align="left">四阶标题</td><td align="left">Ctrl+Home</td><td align="left">返回Typora顶部</td></tr><tr><td align="left">Ctrl+5</td><td align="left">五阶标题</td><td align="left">Ctrl+End</td><td align="left">返回Typora底部</td></tr><tr><td align="left">Ctrl+6</td><td align="left">六阶标题</td><td align="left">Ctrl+T</td><td align="left">创建表格</td></tr><tr><td align="left">Ctrl+L</td><td align="left">选中某句话</td><td align="left">Ctrl+K</td><td align="left">创建超链接</td></tr><tr><td align="left">Ctrl+D</td><td align="left">选中某个单词</td><td align="left">Ctrl+F</td><td align="left">搜索</td></tr><tr><td align="left">Ctrl+E</td><td align="left">选中相同格式的文字</td><td align="left">Ctrl+H</td><td align="left">搜索并替换</td></tr><tr><td align="left">Alt+Shift+5</td><td align="left">删除线</td><td align="left">Ctrl+Shift+I</td><td align="left">插入图片</td></tr></tbody></table><p>注：一些实体符号在使用之后要加空格，还有一些实体符号需要在实体符号之前加”\”才能够显示。</p><h3 id="图片插入"><a href="#图片插入" class="headerlink" title="图片插入"></a>图片插入</h3><p>Typora 的图片插入功能是广受好评的。要知道，Markdown 原生不太注重图片插入的功能，但你可以在 Typora 中：</p><ul><li>直接使用 <code>右键 - 复制 Ctrl + V</code> 将网络图片、剪贴板图片复制到文档中</li><li>拖动本地图片到文档中</li></ul><p>Typora 会自动帮你插入符合 Markdown 语法的图片语句，并给它加上标题。</p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210819195033429.png" alt="image-20210819195033429"></p><center style="color:#C0C0C0">复制图片</center><p>你也完全可以使用图床来保证文档在分享后图片仍能正常显示。</p><p>更强大的是，Typora 支持在拖动或 <code>Ctrl + V</code> 网络图片后自动将其保存到本地。你可以在 <code>文件 - 偏好设置 - 编辑器 - 图片插入</code> 中选择复制到哪个路径，什么情况下需要复制。</p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210819194937889.png" alt="image-20210819194937889"></p><center style="color:#C0C0C0">图片插入</center><p>这一功能保证了即使网络图片源失效了，你还有本地的备份可用。同时也能使你的文档文件夹更合理、完整。</p><h3 id="打字机模式和专注模式"><a href="#打字机模式和专注模式" class="headerlink" title="打字机模式和专注模式"></a>打字机模式和专注模式</h3><p><strong>「打字机模式」</strong>使得你所编辑的那一行永远处于屏幕正中。</p><p><strong>「专注模式」</strong>使你正在编辑的那一行保留颜色，而其他行的字体呈灰色。</p><p>你可以在 <code>视图 - 专注模式 / 打字机模式</code> 中勾选使用这两个模式。</p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/8b4e14ef732a23d4cc2a8fb1f8ec016c.gif" alt="img"></p><center style="color:#C0C0C0">两种模式</center><h3 id="实时预览"><a href="#实时预览" class="headerlink" title="实时预览"></a>实时预览</h3><p>我想很果断地下这个结论：到现在还不支持编辑界面实时预览的 Markdown 编辑器基本可以退出市场了。Typora 在这一方面显然已经领先了一大步——他们连 Markdown 语法的标记都在实时预览中消去了。当你离开正在编辑的有格式的文本段后，Typora 会自动隐藏 Markdown 标记，只留下<strong>「所见即所得」</strong>的美妙。<em>他们把这称为 Hybrid View。</em></p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/f99c9ce02e2728ec6c64b443947fc67e.gif" alt="img"></p><center style="color:#C0C0C0">所见即所得</center><p>为了防止一些程序 bug 的发生（虽然在我使用下来感到是很少的）导致格式问题无法修改，Typora 保留了一个<strong>「源代码模式」</strong>。你可以通过 <code>视图 - 源代码模式</code> 或左下角的 <code>&lt;/&gt;</code> 按钮进入。</p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/bcda9c4e35725b7297a6b90d8745564e.gif" alt="img"></p><center style="color:#C0C0C0">源代码模式</center><h3 id="大纲-文件侧边栏"><a href="#大纲-文件侧边栏" class="headerlink" title="大纲 / 文件侧边栏"></a>大纲 / 文件侧边栏</h3><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210819200541814.png" alt="image-20210819200541814"></p><center style="color:#C0C0C0">侧边栏-大纲</center><p>Typora 会根据你 Markdown 标记的 H1、H2、H3…… 各级标题为你呈现一个大纲。</p><p>你也可以选择查看文件夹中的文件，但由于目前 Typora 只支持查看 md 文件，图片文件会显示乱码。</p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210819200711298.png" alt="image-20210819200711298"></p><center style="color:#C0C0C0">侧边栏-文件</center><h3 id="emoji-表情"><a href="#emoji-表情" class="headerlink" title="emoji 表情"></a>emoji 表情</h3><p>如今 emoji 表情越来越多地出现在一些网站文章中，但在桌面端（特别是 Windows 系统）文本编辑器上插入 emoji 是一件十分麻烦的事情。在使用 Typora 之前，我打出 emoji 表情的办法基本有两个：</p><ol><li><strong>输入法联想：</strong>优点是比较方便，但会插入一张图片而不是一个字符，在许多情景下都不是很合适。 </li><li><strong>复制 emoji 符号：</strong>优点是能保证符号的形式，但显然每次用都需要去复制，比较麻烦。</li></ol><p>在 Typora 中，你可以用 <code>:emoji:</code> 的形式来打出 emoji，软件会自动给出图形的提示，还是比较好用的。</p><p>:sunglasses:</p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210819201306641.png" alt="image-20210819201306641"></p><center style="color:#C0C0C0">Typora 中输入 emoji</center><h3 id="目录（TOC）"><a href="#目录（TOC）" class="headerlink" title="目录（TOC）"></a>目录（TOC）</h3><p>输入 <code>[ toc ]</code> 然后回车，即可创建一个“目录”。TOC从文档中提取所有标题，其内容将自动更新。</p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210819204451866.png" alt="image-20210819204451866"></p><center style="color:#C0C0C0">目录</center><h2 id="一个学术文档编辑器"><a href="#一个学术文档编辑器" class="headerlink" title="一个学术文档编辑器"></a>一个学术文档编辑器</h2><p>除了基本的文本编辑体验极佳之外，Typora 还是一个非常优秀的学术文档编辑器。当然作为一个轻量级的、基于 Markdown 的编辑器，它不能与那些 LaTeX 编辑器相提并论，但它仍支持了许多可用于学术写作的功能。</p><h3 id="LaTeX"><a href="#LaTeX" class="headerlink" title="LaTeX"></a>LaTeX</h3><blockquote><p>LaTeX 是一种基于 TeX 的排版系统，由于它易于快速生成复杂表格和数学公式，非常适用于生成高印刷质量的科技和数学类文档。如果你常阅读数学、计算机等领域的学术论文，你一定对 LaTeX 不陌生。</p></blockquote><p>Typora 原生支持 LaTeX 语法，你有两种方式输入 LaTeX 风格的数学公式：</p><ol><li><strong>行内公式（inline）：</strong>用 <code>$...$</code> 括起公式，公式会出现在行内。</li><li><strong>块间公式（display）：</strong>用 <code>$$...$$</code> 括起公式（注意 <code>$$</code> 后需要换行），公式会默认显示在行中间。</li></ol><p>具体的 LaTeX 语法在此不赘述了，你可以在 <a href="https://blog.csdn.net/happyday_d/article/details/83715440">这篇文章</a> 中查看。</p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>在 Markdown 中插入表格一直是一件比较头疼的事情。在一般的 Markdown 编辑器中，你可以通过以下的格式插入表格：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">| :-----| ----: | :----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></table></figure><p>好在 Typora 为我们提供了图形界面的插入表格的功能，你只需要在行内 <code>鼠标右键 - 插入 - 表格</code> ，并输入行数和列数，Typora 就会自动生成一张样式不错的空表格。</p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/1-162935603852713" alt="img"></p><center style="color:#C0C0C0">Typora 表格</center><h3 id="链接引用与脚注"><a href="#链接引用与脚注" class="headerlink" title="链接引用与脚注"></a>链接引用与脚注</h3><p><strong>链接引用</strong>类似于我们常在论文末尾看到的「参考文献」的写法，你可以通过 <code>[]:</code> 的语法来为你的文档加上链接引用。</p><p><strong>脚注</strong>在少数派的文章中也很常见，即某段话结尾右上角标有数字标记，页面底部进行注释的写法。你可以在需要插入脚注标号的位置写 <code>[^ number ]</code> ，再在下方通过 <code>[^ number ]:</code> 在文档中插入脚注。注意不要遗漏了脚注编号 <code>number</code> 前后的空格。</p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210819203639787.png" alt="image-20210819203639787"></p><center style="color:#C0C0C0">链接引用和脚注</center><h3 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h3><p>除了前文提到的文件侧边栏，Typora 还提供了一些耦合度不高的文件系统。</p><ul><li><strong>快速打开：</strong>你可以通过 <code>文件 - 快速打开...</code> 或 <code>Ctrl + P</code> 快捷键快速打开最近的文档。</li><li><strong>保存：</strong>Typora 支持自动保存，一般很少有写好的文档丢失的情况。同时它也提供了诸如「保存」、「另存为」、「保存全部打开的文件…」之类的功能。</li><li><strong>导入：</strong>Typora 支持非常多的文件格式：.docx, .latex, .tex, .ltx, .rst, .rest, .org, .wiki, .dokuwiki, .textile, .opml, .epub。</li><li><strong>导出：</strong>Typora 原生支持导出 PDF，HTML等格式。你可以根据软件内提示安装 <strong>Pandoc 插件</strong>来导出更多例如 docx，LaTeX 等格式。 </li></ul><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210819203219763.png" alt="image-20210819203219763"></p><center style="color:#C0C0C0">导出</center><h2 id="一个伪装成文本编辑器的浏览器"><a href="#一个伪装成文本编辑器的浏览器" class="headerlink" title="一个伪装成文本编辑器的浏览器"></a>一个伪装成文本编辑器的浏览器</h2><p>在图片插入的选项中，Typora 用了「复制图片到 ./${filename}.assets 文件夹」的说法，而这其实是网页前端常用的 Javascript 字符串模板语法的风格。</p><p>再比如，Typora 将更遵循 GFM 标准的 Markdown 语法模式称为「严格模式 Strict Mode」，这一说法常见于 HTML 和 JavaScript 编程中。类似「源代码模式」的说法也是同理。</p><p>当然，最明显的一点是当你按下 <code>Shift + F12</code> 快捷键时，页面会弹出一个基于 Chrome 的开发者工具栏，也就是我们在浏览器中常说的「审查元素」。</p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210819202953842.png" alt="image-20210819202953842"></p><center style="color:#C0C0C0">审查元素</center><h3 id="伪装从何而来？"><a href="#伪装从何而来？" class="headerlink" title="伪装从何而来？"></a>伪装从何而来？</h3><p>当我们把视角放在「Typora 是一个支持 Markdown 语言的文本编辑器」的出发点来考虑这个问题，一切就都显得很明白了。</p><p>John Gruber 在 2004 年用 Perl 创造了 Markdown 语言，这个语言的目的是希望大家使用「易于阅读、易于撰写的纯文字格式，并选择性的转换成有效的 XHTML（或是 HTML）」。也就是说，<strong>在 Markdown 诞生之初，它就是为了被浏览器阅读而设计的。</strong></p><p>我们在用 Markdown 语言撰写文稿的时候，其实本质上是在借助某种编程语言的转化（解析器）来编写一个 HTML 网页。Markdown 从它诞生之初就与 Web 技术有着及其紧密的联系。</p><p>Typora 利用解析器先将我们写的 Markdown 文档解析成为 HTML 文档，再为它嵌入一个 CSS 样式，最后再加上可能需要的脚本等。</p><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><p>HTML 是一种标记语言，主要负责构成网页的骨架，它包含所有不加装饰的网页元素。在 Typora 的使用场景下则是所有的<strong>文本、段落、标题等</strong>的记号。</p><h4 id="HTML-标签"><a href="#HTML-标签" class="headerlink" title="HTML 标签"></a>HTML 标签</h4><p>Typora 支持许多常用的 HTML 标签，如果你了解 HTML 语法的话，你可以写出十分美观丰富的文档页面。</p><p>比如每张图片下的图片说明，就是HTML风格的文本：</p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210819202813266.png" alt="image-20210819202813266"></p><center style="color:#C0C0C0">HTML</center><p>事实上你可以在 Typora 中完成许多基本的 HTML 风格的文本输入，例如 HTML 字符、HTML 块、HTML 风格的注释，甚至是视频和音频。具体支持的功能和限制请在 <a href="http://support.typora.io/HTML/">官方文档</a> 中查阅。</p><p>有了这一功能，我们就可以在 Typora 中创造出远超普通 Markdown 文档的页面效果。</p><h4 id="导出为-HTML"><a href="#导出为-HTML" class="headerlink" title="导出为 HTML"></a>导出为 HTML</h4><p>Typora 原生支持将文档导出为 HTML 格式的文件，并选择是否要嵌入 style（也就是后文我将提到的 CSS 的部分）。</p><p>除此之外，由于其本身「浏览器」的属性，你可以直接在实时预览界面用 <code>Ctrl +C</code> 复制到 HTML 代码。一个实用的用处是将这些 HTML 代码直接 <code>Ctrl + V</code> 黏贴到微信公众号后台，基本可以保证两边显示效果相同。这一点不仅使公众号推送可以有更自由、美观的样式，也让编辑、排版更轻松了。（由于微信自带浏览器的一些特性，可能有少部分 CSS style 不能生效，建议多多校对。）</p><p>具体如何用 Typora 完成公众号写作，你可以在 <a href="https://sspai.com/post/40524">这篇文章</a> 中进一步了解。</p><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><p>为了让文档更美观，我们可以为其加上 CSS style。我认为 Typora 对 CSS 的支持让它成为一众桌面笔记应用中最与众不同的一个。在 Typora 中 CSS 被称为「主题」，但其本质仍是 CSS 文件。你可以在 <code>文件 - 偏好设置 - 主题 - 打开主题文件夹</code> 看到这些 CSS 文件。</p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210819202407420.png" alt="image-20210819202407420"></p><center style="color:#C0C0C0">主题选择</center><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210819202501265.png" alt="image-20210819202501265"></p><center style="color:#C0C0C0">主题文件夹</center><p>选择不同的主题可以使文档拥有不同的外观，但不会影响内容。Typora 自带了若干主题，你也可以在 <a href="http://theme.typora.io/">官网</a> 下载更多的主题。我选择的是Minit主题。</p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210819202121085.png" alt="image-20210819202121085"></p><center style="color:#C0C0C0">主题商店</center><p>除此以外，如果你有一定的 Web 编程基础，你当然也可以自己修改、新建适合你使用需求的 CSS 文件。使用 Typora 的「主题」功能写公众号的一个好处是，只需要每次都套用同样的主题，我们就可以在保证每次排版规范都相同的同时，节省许多重复的工作。</p><p>参考链接1：[Typora入门](<a href="https://www.cnblogs.com/hider/p/11614688.html#%E5%9B%BE%E7%89%87">Typora入门：全网最全教程 - Hider1214 - 博客园 (cnblogs.com)</a>)</p><p>参考链接2：[Typora 完全使用详解](<a href="https://sspai.com/post/54912">Typora 完全使用详解 - 少数派 (sspai.com)</a>)</p><p>参考链接3：<a href="https://www.simon96.online/2018/10/18/Typora%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%AD%E6%96%87%E7%89%88%EF%BC%89/">Typora入门（中文版）</a></p><p>参考链接4：<a href="https://www.jianshu.com/p/b7fd16a44508">Typora</a></p>]]></content>
      
      
      <categories>
          
          <category> Typora </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Github pages搭建Hexo网站</title>
      <link href="/%E6%90%AD%E5%BB%BAHexo%E7%BD%91%E7%AB%99/"/>
      <url>/%E6%90%AD%E5%BB%BAHexo%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<h1 id="本地安装Hexo"><a href="#本地安装Hexo" class="headerlink" title="本地安装Hexo"></a>本地安装Hexo</h1><h2 id="Hexo-框架简介"><a href="#Hexo-框架简介" class="headerlink" title="Hexo 框架简介"></a>Hexo 框架简介</h2><p>Hexo 是一个基于Node.js的快速、简洁且高效的静态博客框架。Hexo 支持Markdown解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><p>优点：</p><ul><li><p>纯静态博客，部署简单、成本低廉、运行优化非常高效。</p></li><li><p>Hexo 静态博客框架可以在云端，也可以在本地电脑上甚至手机上。</p></li><li><p>Hexo 框架的博客网站没有网站后台，不存在后台安全漏洞的问题。</p></li><li><p>因为是纯静态的，几乎所有的 CDN 服务都可以完美的加速提升浏览速度。</p></li><li><p>搜索引擎对纯静态网站有天然的青睐度，收录、权重优先权明显。</p></li><li><p>纯静态网站会让网络攻击成本大大的增加也就是说纯静态网站被攻击的可能性更低了。</p><p>Hexo 中文官网：<a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p></li></ul><h2 id="下载Hexo-依赖环境"><a href="#下载Hexo-依赖环境" class="headerlink" title="下载Hexo 依赖环境"></a>下载Hexo 依赖环境</h2><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><p>下载地址：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p><p>具体配置方法可参考网上配置教程</p><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><p>下载地址：<a href="https://git-scm.com/">https://git-scm.com/</a></p><p>具体配置方法可参考网上配置教程</p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>鼠标右键出现Git Bash Here</p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210820143717076.png"></p><p>点击会出来一个基于当前路径的终端</p><h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><p>本地新建一个空文件夹，用来存放 Hexo 的文件和以后要写的博客文件，注意不要有中文路径，避免可能出现的问题。我这里建立在桌面，取名 MyBlog。</p><p>进入新建的文件夹，右键，选择<code>Git Bash Here</code>，依次输入下面的命令。</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 hexo 框架</span></span><br><span class="line">npm install <span class="literal">-g</span> hexo<span class="literal">-cli</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化文件夹</span></span><br><span class="line">hexo init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 hexo 依赖包</span></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>第一行安装 hexo 模块，-g表示安装全局模块；第二行是 hexo 初始化，会用 git clone命令去 GitHub 下载一个 hexo 默认模板代码库；第三行是安装依赖包，类似安装 pip 的 requirement 文件，会根据刚下载的代码库中的配置文件，下载并安装所需依赖包。安装成功结果，如下图。</p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210820144746249.png"></p><p>可能出现的问题：</p><p><strong><code>npm install -g hexo-cli</code>命令执行卡住，或者报错连接不上</strong></p><p>可能是 npm 源速度太慢，可以尝试修改淘宝源解决。</p><p>前面三条命令执行成功，Hexo 框架在本地就已经搭建好了，接下来启动hexo服务。</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成静态网站</span></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动服务器</span></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>启动成功如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210820145255034.png"></p><p>此时，打开浏览器，输入网址<code>http://localhost:4000/</code>，就可以看到我们 Hexo 搭建的博客示例了。此时是默认主题，比较简洁，下一步我们换一个更精美的主题。</p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210820145426644.png"></p><p>可能出现的问题：</p><p>搭建hexo博客时，到了最后一步，<code>hexo s</code>后只出现代码，而不是首页。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%- partial(&#x27;_partial/head&#x27;) %&gt;</span><br><span class="line">&lt;%- partial(&#x27;_partial/header&#x27;, null, &#123;cache: !config.relative_link&#125;) %&gt;</span><br><span class="line">&lt;%- body %&gt;</span><br><span class="line">&lt;% if (theme.sidebar &amp;&amp; theme.sidebar !== &#x27;bottom&#x27;)&#123; %&gt; &lt;%- partial(&#x27;_partial/sidebar&#x27;, null, &#123;cache: !config.relative_link&#125;) %&gt; &lt;% &#125; %&gt;</span><br><span class="line">&lt;%- partial(&#x27;_partial/footer&#x27;, null, &#123;cache: !config.relative_link&#125;) %&gt;</span><br><span class="line">&lt;%- partial(&#x27;_partial/mobile-nav&#x27;, null, &#123;cache: !config.relative_link&#125;) %&gt; &lt;%- partial(&#x27;_partial/after-footer&#x27;) %&gt; </span><br></pre></td></tr></table></figure><p>原因：在<code>npm install</code>安装依赖时出现了错误。</p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210820144908361.png"></p><p>不难发现是<strong>ejs</strong>出现了问题。我们可以先执行<code>npm install ejs@2.7.4 --ignore-scripts</code>后再继续后续操作。</p><h2 id="更换-Hexo-博客主题"><a href="#更换-Hexo-博客主题" class="headerlink" title="更换 Hexo 博客主题"></a>更换 Hexo 博客主题</h2><h3 id="如何找主题"><a href="#如何找主题" class="headerlink" title="如何找主题"></a>如何找主题</h3><p>下面是我寻找主题的两种方法。</p><ul><li>官方网站</li></ul><p>Hexo 官网收录了几百个第三方主题，其中有许多中文开发者开发的主题。</p><p>在 Hexo 官网点击 themes，进入主题页，通过上方的搜索框可以根据标签搜索。</p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210820150632776.png"></p><ul><li>Github 搜索</li></ul><p>在 Github 官网搜索hexo-theme，选择All GitHub，</p><p>点击右上角Sort可以选择按Most stars数量排序，根据流行程度找到心仪的主题。</p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210821103338493.png"></p><p>我目前使用的主题是<strong>butterfly</strong>，这个主题功能强大、漂亮，且色彩丰富。</p><p>Demo 示例： <a href="https://butterfly.js.org/">Butterfly</a> | <a href="https://jerryc.me/">JerryC</a></p><p>GitHub 主页：<a href="https://github.com/jerryc127/hexo-theme-butterfly">hexo-theme-butterfly</a></p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/1b5abeaa3bf16cba6fdb2d3274ad3d9e.png" alt="image-20201226233544278"></p><h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><p>以<strong>butterfly</strong>为例，在 Hexo 博客根目录下，右键，选择<code>Git Bash Here</code>，执行下面命令：</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git clone <span class="literal">-b</span> master https://github.com/jerryc127/hexo<span class="literal">-theme</span><span class="literal">-butterfly</span>.git themes/butterfly</span><br></pre></td></tr></table></figure><p>修改 Hexo 根目录下的 <strong>_config.yml</strong>，把主题改为butterfly</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure><p>如果你没有 pug 以及 stylus 的渲染器，请下载安装：</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install hexo<span class="literal">-renderer</span><span class="literal">-pug</span> hexo<span class="literal">-renderer</span><span class="literal">-stylus</span> -<span class="literal">-save</span></span><br></pre></td></tr></table></figure><p>最后在根目录下输入：</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 清理 &amp;&amp; 生成 &amp;&amp; 启动</span></span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210822102237177.png" alt="image-20210822102237177"></p><p>此时再到浏览器打开网址<code>http://localhost:4000</code>，可以看到我们的博客已经换上主题。</p><h1 id="基于-Github-pages-建站"><a href="#基于-Github-pages-建站" class="headerlink" title="基于 Github pages 建站"></a>基于 <strong>Github pages</strong> 建站</h1><p>现在这个网页只能本地访问，要想发布到互联网上，还需要将它部署在网站上。</p><p>博客的功能只要能阅读文章就够了，因此可以考虑将其部署在提供静态网页托管服务的网站上，这样就省去了购买服务器(ECS)，购买域名这些步骤，不仅省钱，更重要的是省事儿。</p><p>许多平台都提供了静态网页托管服务，其中最方便的当然是 GitHub Pages，只需要注册一个账号就可以使用。GitHub Pages的服务器毕竟在国外，如果觉得访问太慢，也可以选择国内功能相似的 Gitee Pages。不过目前使用Gitee Pages还需手持身份证的照片进行实名认证，较为麻烦，因此博主使用GitHub。</p><h2 id="GitHub-Pages-简介"><a href="#GitHub-Pages-简介" class="headerlink" title="GitHub Pages 简介"></a>GitHub Pages 简介</h2><p>GitHub 是世界上最流行的软件源代码托管服务平台，为什么要提供网页托管服务呢？</p><p>这是因为一个项目的主页如果只有源码，对新接触的人很不友好，不知从何处下手。虽然已经有了 readme.md 文件，但毕竟不如一个直观的网页来的直接。于是 GitHub 就设计了 Pages 功能，允许用户设计一个图文并茂的网页作为项目首页。</p><p>虽然 GitHub Pages 的初衷是提供自定义的项目首页，但是它的玩法不止这一个。因此许多博主都用这个功能来搭建自己的博客，因为它实在是太太方便了。</p><p>去GitHub Pages 官网 pages.github ，拉到最后，可以看到官方也推荐使用 GitHub Pages 搭建博客，并且提供了示例教程。</p><h2 id="GitHub-Pages-准备"><a href="#GitHub-Pages-准备" class="headerlink" title="GitHub Pages 准备"></a>GitHub Pages 准备</h2><h3 id="创建-GitHub-Pages-仓库"><a href="#创建-GitHub-Pages-仓库" class="headerlink" title="创建 GitHub Pages 仓库"></a>创建 GitHub Pages 仓库</h3><p>由于每个 GitHub 账户只能建立一个 GitHub Pages 页面，所以 <code>Repository name</code> 必须填<code>&lt;你的用户名&gt;.github.io</code>，如<code>xxxx.github.io</code>否则就会建立一个普通仓库，GitHub Pages 功能不会生效。</p><p>Description 填写仓库描述，比如xxxx’  blog等，可不填。</p><p>注意勾选 Public ，否则 GitHub Pages 功能不会生效。建议勾选 Add a README file，会自动生成一个 readme.md文件。</p><p>最后点击<code>Create repository</code>创建仓库。</p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210822104623122.png" alt="image-20210822104623122"></p><h2 id="GitHub-Pages-发布"><a href="#GitHub-Pages-发布" class="headerlink" title="GitHub Pages 发布"></a>GitHub Pages 发布</h2><p>我们把自己的博客生成静态 html 网页，提交到这个仓库目录下，就可以在我们的网址看到博客页面了，这就是 Hexo 框架部署博客的原理。</p><h3 id="安装-Hexo-发布插件"><a href="#安装-Hexo-发布插件" class="headerlink" title="安装 Hexo 发布插件"></a>安装 Hexo 发布插件</h3><p>在博客根目录下，右键，打开<code>Git Bash Here</code>。</p><p>输入下面的命令，安装<code>hexo-deployer-git</code>。</p><p>这个插件用于把生成好的静态页面上传到 GitHub Pages 仓库。</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install hexo<span class="literal">-deployer</span><span class="literal">-git</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210822105228573.png" alt="image-20210822105228573"></p><h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><p>打开博客<code>根目录配置文件</code>(<code>…\MyBlog\_config.yaml</code>)或(<code>…\MyBlog\_config.yml</code>)，拉到文件最后一行，修改为下面的配置（没有的配置项自行添加），保存。</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 其中 xxxxxx 是前面多次用到的你的GitHub用户名</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: git@github.com:xxxxxx/xxxxxx.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><p>最后执行下面命令：</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>待命令执行完毕，打开浏览器，输入网址<code>https://你的用户名.github.io</code>，可以看到一个和第之前本地部署的一模一样的博客出现了。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 教程 </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/hello-world/"/>
      <url>/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
