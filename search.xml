<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexo+Butterfly主题美化</title>
      <link href="/2021/09/14/Hexo+Butterfly%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/"/>
      <url>/2021/09/14/Hexo+Butterfly%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-Butterfly-主题美化"><a href="#Hexo-Butterfly-主题美化" class="headerlink" title="Hexo+Butterfly 主题美化"></a>Hexo+Butterfly 主题美化</h1><h2 id="版本说明"><a href="#版本说明" class="headerlink" title="版本说明"></a>版本说明</h2><p><strong>Butterfly 已经更新到 3.8.3， 目前采用版本为3.8.3</strong></p><h3 id="侧边栏电子时钟"><a href="#侧边栏电子时钟" class="headerlink" title="侧边栏电子时钟"></a>侧边栏电子时钟</h3><h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖:"></a>安装依赖:</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install hexo<span class="literal">-butterfly</span><span class="literal">-clock</span> -<span class="literal">-save</span> </span><br></pre></td></tr></table></figure><h4 id="在-config-yml中配置插件"><a href="#在-config-yml中配置插件" class="headerlink" title="在_config.yml中配置插件:"></a>在<code>_config.yml</code>中配置插件:</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># electric_clock</span></span><br><span class="line"><span class="attr">electric_clock:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 开关</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">5</span> <span class="comment">#过滤器优先权</span></span><br><span class="line">  <span class="attr">enable_page:</span> <span class="string">all</span> <span class="comment"># 应用页面</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="comment"># - /posts/</span></span><br><span class="line">    <span class="comment"># - /about/</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="comment"># 挂载容器类型</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">class</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">sticky_layout</span></span><br><span class="line">    <span class="attr">index:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">loading:</span> <span class="string">https://cdn.jsdelivr.net/gh/tzy13755126023/BLOG_SOURCE/theme_f/loading.gif</span> <span class="comment">#加载动画自定义 </span></span><br></pre></td></tr></table></figure><p><strong>效果如下：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210914220124949.png" alt="image-20210914220124949"></p><h3 id="随机背景图"><a href="#随机背景图" class="headerlink" title="随机背景图"></a>随机背景图</h3><div class="note warning"><p>此处需要对源码进行修改，慎重考虑。</p></div><h4 id="授人以渔"><a href="#授人以渔" class="headerlink" title="授人以渔"></a>授人以渔</h4><p>此处参考了<strong>会飞的小弋</strong>的教程，不过他的butterfly版本较低，现今源码已改变，故这里进行梳理。</p><p>通过网页的<code>search</code>功能基本就能锁定到背景页面的css，显然页面是用的<code>id</code>选择器，且<code>id</code>为<code>web_bg</code>，元素为<code>background</code></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#web_bg</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">z-index</span>: -<span class="number">999</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;/img/banner/6.jpg&quot;</span>);</span><br><span class="line">  <span class="attribute">background-attachment</span>: local;</span><br><span class="line">  <span class="attribute">background-position</span>: center;</span><br><span class="line">  -webkit-<span class="attribute">background-size</span>: cover;</span><br><span class="line">  -moz-<span class="attribute">background-size</span>: cover;</span><br><span class="line">  <span class="attribute">background-size</span>: cover;</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过用<code>js</code>的<code>document.getElementById(&#39;web_bg&#39;)</code>发现并不能取到想要的值，是因为此处不是采用的<strong>行内式</strong>，不过既然知道了<code>web_bg</code>参数，就可以进行全局搜索</p><h4 id="修改源码"><a href="#修改源码" class="headerlink" title="修改源码"></a>修改源码</h4><p>在 <code>butterfly/layout/includes/layout.pug</code> 下找到如下代码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">footer#footer(style=footer_bg)</span><br><span class="line">    !=partial(&#x27;includes/footer&#x27;, &#123;&#125;, &#123;cache: true&#125;)</span><br></pre></td></tr></table></figure><p>在其下追加变成，<strong>注意缩进</strong>，<code>script()</code>与上面的<code>!=</code>对齐</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">footer#footer(style=footer_bg)</span><br><span class="line">    !=partial(&#x27;includes/footer&#x27;, &#123;&#125;, &#123;cache: true&#125;)</span><br><span class="line">if !is_post()</span><br><span class="line">    script() var bg_index = Math.floor(Math.random() * #&#123;theme.background_num&#125;);var res = &#x27;background-image: url(&quot;/img/banner/&#x27; + bg_index + &#x27;.jpg&quot;); background-attachment: fixed;&#x27;;document.getElementById(&#x27;web_bg&#x27;).style = res</span><br></pre></td></tr></table></figure><p>这里的<code>if !is_post()</code>表示文章页面不采用随机背景，如果需要随机则可以把这句话删去。文章背景色是采用主题设置中的<code>background</code>值</p><h4 id="添加图片"><a href="#添加图片" class="headerlink" title="添加图片"></a>添加图片</h4><p>在<code>\source\img</code>目录下新建<code>banner</code>文件夹，然后就可以把图片按照<code>0.jpg</code>、<code>1.jpg</code>、<code>2.jpg</code>这个顺序放入，同时在 <code>butterfly/_config.yml</code> 里添加以下内容</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 随机背景图banner的数量</span></span><br><span class="line"><span class="attr">background_num:</span> <span class="number">8</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> 美化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 界面美化 </tag>
            
            <tag> Hexo </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo配置加强版live2d看板娘</title>
      <link href="/2021/08/25/Hexo%E9%85%8D%E7%BD%AE%E5%8A%A0%E5%BC%BA%E7%89%88live2d%E7%9C%8B%E6%9D%BF%E5%A8%98/"/>
      <url>/2021/08/25/Hexo%E9%85%8D%E7%BD%AE%E5%8A%A0%E5%BC%BA%E7%89%88live2d%E7%9C%8B%E6%9D%BF%E5%A8%98/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo配置加强版live2d看板娘"><a href="#Hexo配置加强版live2d看板娘" class="headerlink" title="Hexo配置加强版live2d看板娘"></a>Hexo配置加强版live2d看板娘</h1><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p><strong>如果已经安装过官方提供的live2d，需要先卸载！</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-helper-live2d</span><br></pre></td></tr></table></figure><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><strong>项目下载地址：<a href="https://github.com/stevenjoezhang/live2d-widget">https://github.com/stevenjoezhang/live2d-widget</a></strong></p><p><strong>下载解压到：<code>themes\butterfly\source\</code>文件夹下</strong></p><h2 id="设置路径"><a href="#设置路径" class="headerlink" title="设置路径"></a>设置路径</h2><p><strong>打开项目目录进入修改autoload.js文件，将live2d_path设为自己的路径，一般为绝对路径：</strong><code>/live2d-widget/</code></p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210826171753095.png" alt="image-20210826171753095"></p><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p><strong>打开butterfly下的layout下的includes目录，点击修改head.pug文件，在文件末尾粘贴：</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">script(src=<span class="string">&#x27;/live2d-widget/autoload.js&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="开启"><a href="#开启" class="headerlink" title="开启"></a>开启</h2><p><strong>在主题配置文件下即butterfly下的_config.yml中添加以下代码：</strong></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 看板娘* </span></span><br><span class="line"><span class="attr">live2d:</span>  </span><br><span class="line"><span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><strong>运行项目就可以在左下角看到一个可换装、可聊天的动态加强版看板娘啦。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210826170620016.png" alt="image-20210826170620016"></p><h2 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h2><h3 id="修改看板娘的位置"><a href="#修改看板娘的位置" class="headerlink" title="修改看板娘的位置"></a><strong>修改看板娘的位置</strong></h3><p><strong>在<code>live2d-widget</code>目录下的<code>waifu.css</code>中的<code>#waifu</code>选择器下修改：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210826170948905.png" alt="image-20210826170948905"></p><h3 id="修改聊天内容"><a href="#修改聊天内容" class="headerlink" title="修改聊天内容"></a><strong>修改聊天内容</strong></h3><p><strong>在<code>live2d-widget</code>文件夹下的<code>waifu-tips.js</code>文件中</strong></p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210826171338176.png" alt="image-20210826171338176"></p><h3 id="修改首次加载的模型"><a href="#修改首次加载的模型" class="headerlink" title="修改首次加载的模型"></a><strong>修改首次加载的模型</strong></h3><p><strong>如果你不喜欢默认的第一个模型，可以指定首次加载的模型。修改<code>modelId</code></strong><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210826171517898.png" alt="image-20210826171517898"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
          <category> 美化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 界面美化 </tag>
            
            <tag> Hexo </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora入门</title>
      <link href="/2021/08/22/Typora%E5%85%A5%E9%97%A8/"/>
      <url>/2021/08/22/Typora%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Typora入门"><a href="#Typora入门" class="headerlink" title="Typora入门"></a>Typora入门</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Typora是一款轻便简洁的Markdown编辑器，支持即时渲染技术，这也是与其他Markdown编辑器最显著的区别。即时渲染使得你写Markdown就想是写Word文档一样流畅自如，不像其他编辑器的有编辑栏和显示栏。</p><ul><li>Typora删除了预览窗口，以及所有其他不必要的干扰。取而代之的是实时预览。</li><li>Markdown的语法因不同的解析器或编辑器而异，Typora使用的是<a href="https://help.github.com/articles/basic-writing-and-formatting-syntax/">GitHub Flavored Markdown</a>。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210819175048608.png" alt="image-20210819175048608"></p><center style="color:#C0C0C0">官网首页</center><h2 id="关于-Markdown"><a href="#关于-Markdown" class="headerlink" title="关于 Markdown"></a>关于 Markdown</h2><p>Markdown 是用来编写结构化文档的一种纯文本格式，它使我们在双手不离开键盘的情况下，可以对文本进行一定程度的格式排版。你可以在 <a href="https://sspai.com/post/36610">这篇文章</a> 中快速入门 Markdown。</p><p>由于目前还没有一个权威机构对 Markdown 的语法进行规范，各应用厂商制作时遵循的 Markdown 语法也是不尽相同的。其中比较受到认可的是 <a href="https://github.github.com/gfm/">GFM 标准</a>，它是由著名代码托管网站 <a href="https://github.com/">GitHub</a> 所制定的。Typora 主要使用的也是 GFM 标准。同时，你还可以在 <code>文件 - 偏好设置 - Markdown 语法偏好 - 严格模式</code> 中将标准设置为「更严格地遵循 GFM 标准」。具体内容你可以在官方的 <a href="http://support.typora.io/Strict-Mode/">这篇文档</a> 中查看。</p><h3 id="语法偏好"><a href="#语法偏好" class="headerlink" title="语法偏好"></a>语法偏好</h3><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210819151516826.png" alt="image-20210819151516826"></p><center style="color:#C0C0C0">严格模式</center><h3 id="智能标点"><a href="#智能标点" class="headerlink" title="智能标点"></a>智能标点</h3><p>我认为「智能标点」是比较有趣的一点。它可以自动帮你将不是很美观的直引号 <code>&quot;</code> <code>&#39;</code> 转化为更美观的弯引号 <code>“</code> <code>‘</code> <code>’</code> <code>”</code>。具体内容你可以在官方的 <a href="http://support.typora.io/SmartyPants/">这篇文档</a> 中查看。关于直弯引号在 macOS 上如何输入你也可以看 <a href="https://sspai.com/post/38342">这篇文章</a>。</p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210819151704847.png" alt="image-20210819151704847"></p><center style="color:#C0C0C0">智能标点</center><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210819173300202.png" alt="image-20210819173300202"></p><center style="color:#C0C0C0">代码块</center><p>Typora 中代码的插入也可以分为行内和块间两种：</p><ol><li>行内代码：用 <code>...</code> 或 <code>...</code> 括起代码，代码会以主题中设置的样式出现在行内，但不会实现代码高亮。</li><li>代码块：输入 ````` 后并输入语言名，换行，开始写代码，Typora 就会自动帮你实现代码高亮。Typora 原生支持许多编程语言代码块的语法高亮，基本日常常用的编程语言它都能很好地支持。<br>除此以外，你也可以直接换行开始写，而后再选择语言。</li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;折线图&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%; height: 500px;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="空格与换行"><a href="#空格与换行" class="headerlink" title="空格与换行"></a>空格与换行</h3><p>Typora 在空格与换行部分主要是使用 <a href="http://www.commonmark.cn/w/">CommonMark</a> 作为标注规范。与前文提到的 GFM 一样，CommonMark 也是比较流行的 Markdown 语言规范（解析器）之一。</p><ul><li><p><strong>空格：</strong>在输入连续的空格后，Typora 会在编辑器视图里为你保留这些空格，但当你打印或导出时，这些空格会被省略成一个。<br>你可以在源代码模式下，为每个空格前加一个 <code>\</code> 转义符，或者直接使用 HTML 风格的 <code>&amp;nbps;</code> 来保持连续的空格。</p></li><li><p><strong>软换行：</strong>需要说明的是，在 Markdown 语法中，换行（line break）与换段是不同的。且换行分为软换行和硬换行。在 Typora 中，你可以通过 <code>Shift + Enter</code> 完成一次软换行。软换行只在编辑界面可见，当文档被导出时换行会被省略。</p></li><li><p><strong>硬换行：</strong>你可以通过 <code>空格 + 空格 + Shift + Enter</code> 完成一次硬换行，而这也是许多 Markdown 编辑器所原生支持的。硬换行在文档被导出时将被保留，且没有换段的段后距。</p></li><li><p><strong>换段：</strong>你可以通过 <code>Enter</code> 完成一次换段。Typora 会自动帮你完成两次 <code>Shift + Enter</code> 的软换行，从而完成一次换段。这也意味着在 Markdown 语法下，换段是通过在段与段之间加入空行来实现的。</p></li><li><p><strong>Windows 风格（CR+LF）与 Unix 风格（CR）的换行符：</strong>CR 表示回车 <code>\r</code> ，即回到一行的开头，而 LF 表示换行 <code>\n</code> ，即另起一行。<br>所以 Windows 风格的换行符本质是「回车 + 换行」，而 Unix 风格的换行符是「换行」。这也是为什么 Unix / Mac 系统下的文件，如果在 Windows 系统直接打开会全部在同一行内。 你可以在 <code>文件 - 偏好设置 - 编辑器 - 默认换行符</code> 中对此进行切换。</p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210819174430348.png" alt="image-20210819174430348"></p></li></ul><center style="color:#C0C0C0">空格与换行</center><p>下附以上各空格、换行、换段的测试结果图。具体内容你可以在官网的 <a href="http://support.typora.io/Line-Break/">这篇文档</a> 中查阅。</p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/5c2fbaa53b27666a7fd0b07ac3e100bf.png" alt="img"></p><h2 id="Typora操作"><a href="#Typora操作" class="headerlink" title="Typora操作"></a>Typora操作</h2><h3 id="Typora快捷键"><a href="#Typora快捷键" class="headerlink" title="Typora快捷键"></a>Typora快捷键</h3><ul><li>加粗： <code>Ctrl + B</code></li><li>标题： <code>Ctrl + H</code></li><li>插入链接： <code>Ctrl + K</code></li><li>插入代码： <code>Ctrl + Shift + C</code>  – 无法执行</li><li>行内代码： <code>Ctrl + Shift + K</code></li><li>插入图片： <code>Ctrl + Shift + I</code></li><li>无序列表：<code>Ctrl + Shift + L</code> – 无法执行</li><li>撤销： <code>Ctrl + Z</code></li></ul><table><thead><tr><th align="left">快捷键</th><th align="left">作用</th><th align="left">快捷键</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">Ctrl+1</td><td align="left">一阶标题</td><td align="left">Ctrl+B</td><td align="left">字体加粗</td></tr><tr><td align="left">Ctrl+2</td><td align="left">二阶标题</td><td align="left">Ctrl+I</td><td align="left">字体倾斜</td></tr><tr><td align="left">Ctrl+3</td><td align="left">三阶标题</td><td align="left">Ctrl+U</td><td align="left">下划线</td></tr><tr><td align="left">Ctrl+4</td><td align="left">四阶标题</td><td align="left">Ctrl+Home</td><td align="left">返回Typora顶部</td></tr><tr><td align="left">Ctrl+5</td><td align="left">五阶标题</td><td align="left">Ctrl+End</td><td align="left">返回Typora底部</td></tr><tr><td align="left">Ctrl+6</td><td align="left">六阶标题</td><td align="left">Ctrl+T</td><td align="left">创建表格</td></tr><tr><td align="left">Ctrl+L</td><td align="left">选中某句话</td><td align="left">Ctrl+K</td><td align="left">创建超链接</td></tr><tr><td align="left">Ctrl+D</td><td align="left">选中某个单词</td><td align="left">Ctrl+F</td><td align="left">搜索</td></tr><tr><td align="left">Ctrl+E</td><td align="left">选中相同格式的文字</td><td align="left">Ctrl+H</td><td align="left">搜索并替换</td></tr><tr><td align="left">Alt+Shift+5</td><td align="left">删除线</td><td align="left">Ctrl+Shift+I</td><td align="left">插入图片</td></tr></tbody></table><p>注：一些实体符号在使用之后要加空格，还有一些实体符号需要在实体符号之前加”\”才能够显示。</p><h3 id="图片插入"><a href="#图片插入" class="headerlink" title="图片插入"></a>图片插入</h3><p>Typora 的图片插入功能是广受好评的。要知道，Markdown 原生不太注重图片插入的功能，但你可以在 Typora 中：</p><ul><li>直接使用 <code>右键 - 复制 Ctrl + V</code> 将网络图片、剪贴板图片复制到文档中</li><li>拖动本地图片到文档中</li></ul><p>Typora 会自动帮你插入符合 Markdown 语法的图片语句，并给它加上标题。</p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210819195033429.png" alt="image-20210819195033429"></p><center style="color:#C0C0C0">复制图片</center><p>你也完全可以使用图床来保证文档在分享后图片仍能正常显示。</p><p>更强大的是，Typora 支持在拖动或 <code>Ctrl + V</code> 网络图片后自动将其保存到本地。你可以在 <code>文件 - 偏好设置 - 编辑器 - 图片插入</code> 中选择复制到哪个路径，什么情况下需要复制。</p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210819194937889.png" alt="image-20210819194937889"></p><center style="color:#C0C0C0">图片插入</center><p>这一功能保证了即使网络图片源失效了，你还有本地的备份可用。同时也能使你的文档文件夹更合理、完整。</p><h3 id="打字机模式和专注模式"><a href="#打字机模式和专注模式" class="headerlink" title="打字机模式和专注模式"></a>打字机模式和专注模式</h3><p><strong>「打字机模式」</strong>使得你所编辑的那一行永远处于屏幕正中。</p><p><strong>「专注模式」</strong>使你正在编辑的那一行保留颜色，而其他行的字体呈灰色。</p><p>你可以在 <code>视图 - 专注模式 / 打字机模式</code> 中勾选使用这两个模式。</p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/8b4e14ef732a23d4cc2a8fb1f8ec016c.gif" alt="img"></p><center style="color:#C0C0C0">两种模式</center><h3 id="实时预览"><a href="#实时预览" class="headerlink" title="实时预览"></a>实时预览</h3><p>我想很果断地下这个结论：到现在还不支持编辑界面实时预览的 Markdown 编辑器基本可以退出市场了。Typora 在这一方面显然已经领先了一大步——他们连 Markdown 语法的标记都在实时预览中消去了。当你离开正在编辑的有格式的文本段后，Typora 会自动隐藏 Markdown 标记，只留下<strong>「所见即所得」</strong>的美妙。<em>他们把这称为 Hybrid View。</em></p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/f99c9ce02e2728ec6c64b443947fc67e.gif" alt="img"></p><center style="color:#C0C0C0">所见即所得</center><p>为了防止一些程序 bug 的发生（虽然在我使用下来感到是很少的）导致格式问题无法修改，Typora 保留了一个<strong>「源代码模式」</strong>。你可以通过 <code>视图 - 源代码模式</code> 或左下角的 <code>&lt;/&gt;</code> 按钮进入。</p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/bcda9c4e35725b7297a6b90d8745564e.gif" alt="img"></p><center style="color:#C0C0C0">源代码模式</center><h3 id="大纲-文件侧边栏"><a href="#大纲-文件侧边栏" class="headerlink" title="大纲 / 文件侧边栏"></a>大纲 / 文件侧边栏</h3><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210819200541814.png" alt="image-20210819200541814"></p><center style="color:#C0C0C0">侧边栏-大纲</center><p>Typora 会根据你 Markdown 标记的 H1、H2、H3…… 各级标题为你呈现一个大纲。</p><p>你也可以选择查看文件夹中的文件，但由于目前 Typora 只支持查看 md 文件，图片文件会显示乱码。</p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210819200711298.png" alt="image-20210819200711298"></p><center style="color:#C0C0C0">侧边栏-文件</center><h3 id="emoji-表情"><a href="#emoji-表情" class="headerlink" title="emoji 表情"></a>emoji 表情</h3><p>如今 emoji 表情越来越多地出现在一些网站文章中，但在桌面端（特别是 Windows 系统）文本编辑器上插入 emoji 是一件十分麻烦的事情。在使用 Typora 之前，我打出 emoji 表情的办法基本有两个：</p><ol><li><strong>输入法联想：</strong>优点是比较方便，但会插入一张图片而不是一个字符，在许多情景下都不是很合适。 </li><li><strong>复制 emoji 符号：</strong>优点是能保证符号的形式，但显然每次用都需要去复制，比较麻烦。</li></ol><p>在 Typora 中，你可以用 <code>:emoji:</code> 的形式来打出 emoji，软件会自动给出图形的提示，还是比较好用的。</p><p>:sunglasses:</p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210819201306641.png" alt="image-20210819201306641"></p><center style="color:#C0C0C0">Typora 中输入 emoji</center><h3 id="目录（TOC）"><a href="#目录（TOC）" class="headerlink" title="目录（TOC）"></a>目录（TOC）</h3><p>输入 <code>[ toc ]</code> 然后回车，即可创建一个“目录”。TOC从文档中提取所有标题，其内容将自动更新。</p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210819204451866.png" alt="image-20210819204451866"></p><center style="color:#C0C0C0">目录</center><h2 id="一个学术文档编辑器"><a href="#一个学术文档编辑器" class="headerlink" title="一个学术文档编辑器"></a>一个学术文档编辑器</h2><p>除了基本的文本编辑体验极佳之外，Typora 还是一个非常优秀的学术文档编辑器。当然作为一个轻量级的、基于 Markdown 的编辑器，它不能与那些 LaTeX 编辑器相提并论，但它仍支持了许多可用于学术写作的功能。</p><h3 id="LaTeX"><a href="#LaTeX" class="headerlink" title="LaTeX"></a>LaTeX</h3><blockquote><p>LaTeX 是一种基于 TeX 的排版系统，由于它易于快速生成复杂表格和数学公式，非常适用于生成高印刷质量的科技和数学类文档。如果你常阅读数学、计算机等领域的学术论文，你一定对 LaTeX 不陌生。</p></blockquote><p>Typora 原生支持 LaTeX 语法，你有两种方式输入 LaTeX 风格的数学公式：</p><ol><li><strong>行内公式（inline）：</strong>用 <code>$...$</code> 括起公式，公式会出现在行内。</li><li><strong>块间公式（display）：</strong>用 <code>$$...$$</code> 括起公式（注意 <code>$$</code> 后需要换行），公式会默认显示在行中间。</li></ol><p>具体的 LaTeX 语法在此不赘述了，你可以在 <a href="https://blog.csdn.net/happyday_d/article/details/83715440">这篇文章</a> 中查看。</p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>在 Markdown 中插入表格一直是一件比较头疼的事情。在一般的 Markdown 编辑器中，你可以通过以下的格式插入表格：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">| :-----| ----: | :----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></table></figure><p>好在 Typora 为我们提供了图形界面的插入表格的功能，你只需要在行内 <code>鼠标右键 - 插入 - 表格</code> ，并输入行数和列数，Typora 就会自动生成一张样式不错的空表格。</p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/1-162935603852713" alt="img"></p><center style="color:#C0C0C0">Typora 表格</center><h3 id="链接引用与脚注"><a href="#链接引用与脚注" class="headerlink" title="链接引用与脚注"></a>链接引用与脚注</h3><p><strong>链接引用</strong>类似于我们常在论文末尾看到的「参考文献」的写法，你可以通过 <code>[]:</code> 的语法来为你的文档加上链接引用。</p><p><strong>脚注</strong>在少数派的文章中也很常见，即某段话结尾右上角标有数字标记，页面底部进行注释的写法。你可以在需要插入脚注标号的位置写 <code>[^ number ]</code> ，再在下方通过 <code>[^ number ]:</code> 在文档中插入脚注。注意不要遗漏了脚注编号 <code>number</code> 前后的空格。</p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210819203639787.png" alt="image-20210819203639787"></p><center style="color:#C0C0C0">链接引用和脚注</center><h3 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h3><p>除了前文提到的文件侧边栏，Typora 还提供了一些耦合度不高的文件系统。</p><ul><li><strong>快速打开：</strong>你可以通过 <code>文件 - 快速打开...</code> 或 <code>Ctrl + P</code> 快捷键快速打开最近的文档。</li><li><strong>保存：</strong>Typora 支持自动保存，一般很少有写好的文档丢失的情况。同时它也提供了诸如「保存」、「另存为」、「保存全部打开的文件…」之类的功能。</li><li><strong>导入：</strong>Typora 支持非常多的文件格式：.docx, .latex, .tex, .ltx, .rst, .rest, .org, .wiki, .dokuwiki, .textile, .opml, .epub。</li><li><strong>导出：</strong>Typora 原生支持导出 PDF，HTML等格式。你可以根据软件内提示安装 <strong>Pandoc 插件</strong>来导出更多例如 docx，LaTeX 等格式。 </li></ul><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210819203219763.png" alt="image-20210819203219763"></p><center style="color:#C0C0C0">导出</center><h2 id="一个伪装成文本编辑器的浏览器"><a href="#一个伪装成文本编辑器的浏览器" class="headerlink" title="一个伪装成文本编辑器的浏览器"></a>一个伪装成文本编辑器的浏览器</h2><p>在图片插入的选项中，Typora 用了「复制图片到 ./${filename}.assets 文件夹」的说法，而这其实是网页前端常用的 Javascript 字符串模板语法的风格。</p><p>再比如，Typora 将更遵循 GFM 标准的 Markdown 语法模式称为「严格模式 Strict Mode」，这一说法常见于 HTML 和 JavaScript 编程中。类似「源代码模式」的说法也是同理。</p><p>当然，最明显的一点是当你按下 <code>Shift + F12</code> 快捷键时，页面会弹出一个基于 Chrome 的开发者工具栏，也就是我们在浏览器中常说的「审查元素」。</p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210819202953842.png" alt="image-20210819202953842"></p><center style="color:#C0C0C0">审查元素</center><h3 id="伪装从何而来？"><a href="#伪装从何而来？" class="headerlink" title="伪装从何而来？"></a>伪装从何而来？</h3><p>当我们把视角放在「Typora 是一个支持 Markdown 语言的文本编辑器」的出发点来考虑这个问题，一切就都显得很明白了。</p><p>John Gruber 在 2004 年用 Perl 创造了 Markdown 语言，这个语言的目的是希望大家使用「易于阅读、易于撰写的纯文字格式，并选择性的转换成有效的 XHTML（或是 HTML）」。也就是说，<strong>在 Markdown 诞生之初，它就是为了被浏览器阅读而设计的。</strong></p><p>我们在用 Markdown 语言撰写文稿的时候，其实本质上是在借助某种编程语言的转化（解析器）来编写一个 HTML 网页。Markdown 从它诞生之初就与 Web 技术有着及其紧密的联系。</p><p>Typora 利用解析器先将我们写的 Markdown 文档解析成为 HTML 文档，再为它嵌入一个 CSS 样式，最后再加上可能需要的脚本等。</p><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><p>HTML 是一种标记语言，主要负责构成网页的骨架，它包含所有不加装饰的网页元素。在 Typora 的使用场景下则是所有的<strong>文本、段落、标题等</strong>的记号。</p><h4 id="HTML-标签"><a href="#HTML-标签" class="headerlink" title="HTML 标签"></a>HTML 标签</h4><p>Typora 支持许多常用的 HTML 标签，如果你了解 HTML 语法的话，你可以写出十分美观丰富的文档页面。</p><p>比如每张图片下的图片说明，就是HTML风格的文本：</p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210819202813266.png" alt="image-20210819202813266"></p><center style="color:#C0C0C0">HTML</center><p>事实上你可以在 Typora 中完成许多基本的 HTML 风格的文本输入，例如 HTML 字符、HTML 块、HTML 风格的注释，甚至是视频和音频。具体支持的功能和限制请在 <a href="http://support.typora.io/HTML/">官方文档</a> 中查阅。</p><p>有了这一功能，我们就可以在 Typora 中创造出远超普通 Markdown 文档的页面效果。</p><h4 id="导出为-HTML"><a href="#导出为-HTML" class="headerlink" title="导出为 HTML"></a>导出为 HTML</h4><p>Typora 原生支持将文档导出为 HTML 格式的文件，并选择是否要嵌入 style（也就是后文我将提到的 CSS 的部分）。</p><p>除此之外，由于其本身「浏览器」的属性，你可以直接在实时预览界面用 <code>Ctrl +C</code> 复制到 HTML 代码。一个实用的用处是将这些 HTML 代码直接 <code>Ctrl + V</code> 黏贴到微信公众号后台，基本可以保证两边显示效果相同。这一点不仅使公众号推送可以有更自由、美观的样式，也让编辑、排版更轻松了。（由于微信自带浏览器的一些特性，可能有少部分 CSS style 不能生效，建议多多校对。）</p><p>具体如何用 Typora 完成公众号写作，你可以在 <a href="https://sspai.com/post/40524">这篇文章</a> 中进一步了解。</p><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><p>为了让文档更美观，我们可以为其加上 CSS style。我认为 Typora 对 CSS 的支持让它成为一众桌面笔记应用中最与众不同的一个。在 Typora 中 CSS 被称为「主题」，但其本质仍是 CSS 文件。你可以在 <code>文件 - 偏好设置 - 主题 - 打开主题文件夹</code> 看到这些 CSS 文件。</p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210819202407420.png" alt="image-20210819202407420"></p><center style="color:#C0C0C0">主题选择</center><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210819202501265.png" alt="image-20210819202501265"></p><center style="color:#C0C0C0">主题文件夹</center><p>选择不同的主题可以使文档拥有不同的外观，但不会影响内容。Typora 自带了若干主题，你也可以在 <a href="http://theme.typora.io/">官网</a> 下载更多的主题。我选择的是Minit主题。</p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210819202121085.png" alt="image-20210819202121085"></p><center style="color:#C0C0C0">主题商店</center><p>除此以外，如果你有一定的 Web 编程基础，你当然也可以自己修改、新建适合你使用需求的 CSS 文件。使用 Typora 的「主题」功能写公众号的一个好处是，只需要每次都套用同样的主题，我们就可以在保证每次排版规范都相同的同时，节省许多重复的工作。</p><p>参考链接1：[Typora入门](<a href="https://www.cnblogs.com/hider/p/11614688.html#%E5%9B%BE%E7%89%87">Typora入门：全网最全教程 - Hider1214 - 博客园 (cnblogs.com)</a>)</p><p>参考链接2：[Typora 完全使用详解](<a href="https://sspai.com/post/54912">Typora 完全使用详解 - 少数派 (sspai.com)</a>)</p><p>参考链接3：<a href="https://www.simon96.online/2018/10/18/Typora%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%AD%E6%96%87%E7%89%88%EF%BC%89/">Typora入门（中文版）</a></p><p>参考链接4：<a href="https://www.jianshu.com/p/b7fd16a44508">Typora</a></p>]]></content>
      
      
      <categories>
          
          <category> Typora </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Github pages搭建Hexo网站</title>
      <link href="/2021/08/21/%E6%90%AD%E5%BB%BAHexo%E7%BD%91%E7%AB%99/"/>
      <url>/2021/08/21/%E6%90%AD%E5%BB%BAHexo%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<h1 id="本地安装Hexo"><a href="#本地安装Hexo" class="headerlink" title="本地安装Hexo"></a>本地安装Hexo</h1><h2 id="Hexo-框架简介"><a href="#Hexo-框架简介" class="headerlink" title="Hexo 框架简介"></a>Hexo 框架简介</h2><p>Hexo 是一个基于Node.js的快速、简洁且高效的静态博客框架。Hexo 支持Markdown解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><p>优点：</p><ul><li><p>纯静态博客，部署简单、成本低廉、运行优化非常高效。</p></li><li><p>Hexo 静态博客框架可以在云端，也可以在本地电脑上甚至手机上。</p></li><li><p>Hexo 框架的博客网站没有网站后台，不存在后台安全漏洞的问题。</p></li><li><p>因为是纯静态的，几乎所有的 CDN 服务都可以完美的加速提升浏览速度。</p></li><li><p>搜索引擎对纯静态网站有天然的青睐度，收录、权重优先权明显。</p></li><li><p>纯静态网站会让网络攻击成本大大的增加也就是说纯静态网站被攻击的可能性更低了。</p><p>Hexo 中文官网：<a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p></li></ul><h2 id="下载Hexo-依赖环境"><a href="#下载Hexo-依赖环境" class="headerlink" title="下载Hexo 依赖环境"></a>下载Hexo 依赖环境</h2><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><p>下载地址：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p><p>具体配置方法可参考网上配置教程</p><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><p>下载地址：<a href="https://git-scm.com/">https://git-scm.com/</a></p><p>具体配置方法可参考网上配置教程</p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>鼠标右键出现Git Bash Here</p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210820143717076.png"></p><p>点击会出来一个基于当前路径的终端</p><h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><p>本地新建一个空文件夹，用来存放 Hexo 的文件和以后要写的博客文件，注意不要有中文路径，避免可能出现的问题。我这里建立在桌面，取名 MyBlog。</p><p>进入新建的文件夹，右键，选择<code>Git Bash Here</code>，依次输入下面的命令。</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 hexo 框架</span></span><br><span class="line">npm install <span class="literal">-g</span> hexo<span class="literal">-cli</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化文件夹</span></span><br><span class="line">hexo init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 hexo 依赖包</span></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>第一行安装 hexo 模块，-g表示安装全局模块；第二行是 hexo 初始化，会用 git clone命令去 GitHub 下载一个 hexo 默认模板代码库；第三行是安装依赖包，类似安装 pip 的 requirement 文件，会根据刚下载的代码库中的配置文件，下载并安装所需依赖包。安装成功结果，如下图。</p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210820144746249.png"></p><p>可能出现的问题：</p><p><strong><code>npm install -g hexo-cli</code>命令执行卡住，或者报错连接不上</strong></p><p>可能是 npm 源速度太慢，可以尝试修改淘宝源解决。</p><p>前面三条命令执行成功，Hexo 框架在本地就已经搭建好了，接下来启动hexo服务。</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成静态网站</span></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动服务器</span></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>启动成功如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210820145255034.png"></p><p>此时，打开浏览器，输入网址<code>http://localhost:4000/</code>，就可以看到我们 Hexo 搭建的博客示例了。此时是默认主题，比较简洁，下一步我们换一个更精美的主题。</p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210820145426644.png"></p><p>可能出现的问题：</p><p>搭建hexo博客时，到了最后一步，<code>hexo s</code>后只出现代码，而不是首页。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%- partial(&#x27;_partial/head&#x27;) %&gt;</span><br><span class="line">&lt;%- partial(&#x27;_partial/header&#x27;, null, &#123;cache: !config.relative_link&#125;) %&gt;</span><br><span class="line">&lt;%- body %&gt;</span><br><span class="line">&lt;% if (theme.sidebar &amp;&amp; theme.sidebar !== &#x27;bottom&#x27;)&#123; %&gt; &lt;%- partial(&#x27;_partial/sidebar&#x27;, null, &#123;cache: !config.relative_link&#125;) %&gt; &lt;% &#125; %&gt;</span><br><span class="line">&lt;%- partial(&#x27;_partial/footer&#x27;, null, &#123;cache: !config.relative_link&#125;) %&gt;</span><br><span class="line">&lt;%- partial(&#x27;_partial/mobile-nav&#x27;, null, &#123;cache: !config.relative_link&#125;) %&gt; &lt;%- partial(&#x27;_partial/after-footer&#x27;) %&gt; </span><br></pre></td></tr></table></figure><p>原因：在<code>npm install</code>安装依赖时出现了错误。</p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210820144908361.png"></p><p>不难发现是<strong>ejs</strong>出现了问题。我们可以先执行<code>npm install ejs@2.7.4 --ignore-scripts</code>后再继续后续操作。</p><h2 id="更换-Hexo-博客主题"><a href="#更换-Hexo-博客主题" class="headerlink" title="更换 Hexo 博客主题"></a>更换 Hexo 博客主题</h2><h3 id="如何找主题"><a href="#如何找主题" class="headerlink" title="如何找主题"></a>如何找主题</h3><p>下面是我寻找主题的两种方法。</p><ul><li>官方网站</li></ul><p>Hexo 官网收录了几百个第三方主题，其中有许多中文开发者开发的主题。</p><p>在 Hexo 官网点击 themes，进入主题页，通过上方的搜索框可以根据标签搜索。</p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210820150632776.png"></p><ul><li>Github 搜索</li></ul><p>在 Github 官网搜索hexo-theme，选择All GitHub，</p><p>点击右上角Sort可以选择按Most stars数量排序，根据流行程度找到心仪的主题。</p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210821103338493.png"></p><p>我目前使用的主题是<strong>butterfly</strong>，这个主题功能强大、漂亮，且色彩丰富。</p><p>Demo 示例： <a href="https://butterfly.js.org/">Butterfly</a> | <a href="https://jerryc.me/">JerryC</a></p><p>GitHub 主页：<a href="https://github.com/jerryc127/hexo-theme-butterfly">hexo-theme-butterfly</a></p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/1b5abeaa3bf16cba6fdb2d3274ad3d9e.png" alt="image-20201226233544278"></p><h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><p>以<strong>butterfly</strong>为例，在 Hexo 博客根目录下，右键，选择<code>Git Bash Here</code>，执行下面命令：</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">git clone <span class="literal">-b</span> master https://github.com/jerryc127/hexo<span class="literal">-theme</span><span class="literal">-butterfly</span>.git themes/butterfly</span><br></pre></td></tr></table></figure><p>修改 Hexo 根目录下的 <strong>_config.yml</strong>，把主题改为butterfly</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure><p>如果你没有 pug 以及 stylus 的渲染器，请下载安装：</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install hexo<span class="literal">-renderer</span><span class="literal">-pug</span> hexo<span class="literal">-renderer</span><span class="literal">-stylus</span> -<span class="literal">-save</span></span><br></pre></td></tr></table></figure><p>最后在根目录下输入：</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 清理 &amp;&amp; 生成 &amp;&amp; 启动</span></span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210822102237177.png" alt="image-20210822102237177"></p><p>此时再到浏览器打开网址<code>http://localhost:4000</code>，可以看到我们的博客已经换上主题。</p><h1 id="基于-Github-pages-建站"><a href="#基于-Github-pages-建站" class="headerlink" title="基于 Github pages 建站"></a>基于 <strong>Github pages</strong> 建站</h1><p>现在这个网页只能本地访问，要想发布到互联网上，还需要将它部署在网站上。</p><p>博客的功能只要能阅读文章就够了，因此可以考虑将其部署在提供静态网页托管服务的网站上，这样就省去了购买服务器(ECS)，购买域名这些步骤，不仅省钱，更重要的是省事儿。</p><p>许多平台都提供了静态网页托管服务，其中最方便的当然是 GitHub Pages，只需要注册一个账号就可以使用。GitHub Pages的服务器毕竟在国外，如果觉得访问太慢，也可以选择国内功能相似的 Gitee Pages。不过目前使用Gitee Pages还需手持身份证的照片进行实名认证，较为麻烦，因此博主使用GitHub。</p><h2 id="GitHub-Pages-简介"><a href="#GitHub-Pages-简介" class="headerlink" title="GitHub Pages 简介"></a>GitHub Pages 简介</h2><p>GitHub 是世界上最流行的软件源代码托管服务平台，为什么要提供网页托管服务呢？</p><p>这是因为一个项目的主页如果只有源码，对新接触的人很不友好，不知从何处下手。虽然已经有了 readme.md 文件，但毕竟不如一个直观的网页来的直接。于是 GitHub 就设计了 Pages 功能，允许用户设计一个图文并茂的网页作为项目首页。</p><p>虽然 GitHub Pages 的初衷是提供自定义的项目首页，但是它的玩法不止这一个。因此许多博主都用这个功能来搭建自己的博客，因为它实在是太太方便了。</p><p>去GitHub Pages 官网 pages.github ，拉到最后，可以看到官方也推荐使用 GitHub Pages 搭建博客，并且提供了示例教程。</p><h2 id="GitHub-Pages-准备"><a href="#GitHub-Pages-准备" class="headerlink" title="GitHub Pages 准备"></a>GitHub Pages 准备</h2><h3 id="创建-GitHub-Pages-仓库"><a href="#创建-GitHub-Pages-仓库" class="headerlink" title="创建 GitHub Pages 仓库"></a>创建 GitHub Pages 仓库</h3><p>由于每个 GitHub 账户只能建立一个 GitHub Pages 页面，所以 <code>Repository name</code> 必须填<code>&lt;你的用户名&gt;.github.io</code>，如<code>xxxx.github.io</code>否则就会建立一个普通仓库，GitHub Pages 功能不会生效。</p><p>Description 填写仓库描述，比如xxxx’  blog等，可不填。</p><p>注意勾选 Public ，否则 GitHub Pages 功能不会生效。建议勾选 Add a README file，会自动生成一个 readme.md文件。</p><p>最后点击<code>Create repository</code>创建仓库。</p><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210822104623122.png" alt="image-20210822104623122"></p><h2 id="GitHub-Pages-发布"><a href="#GitHub-Pages-发布" class="headerlink" title="GitHub Pages 发布"></a>GitHub Pages 发布</h2><p>我们把自己的博客生成静态 html 网页，提交到这个仓库目录下，就可以在我们的网址看到博客页面了，这就是 Hexo 框架部署博客的原理。</p><h3 id="安装-Hexo-发布插件"><a href="#安装-Hexo-发布插件" class="headerlink" title="安装 Hexo 发布插件"></a>安装 Hexo 发布插件</h3><p>在博客根目录下，右键，打开<code>Git Bash Here</code>。</p><p>输入下面的命令，安装<code>hexo-deployer-git</code>。</p><p>这个插件用于把生成好的静态页面上传到 GitHub Pages 仓库。</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install hexo<span class="literal">-deployer</span><span class="literal">-git</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/chenduowen233/Myblog@main/img/image-20210822105228573.png" alt="image-20210822105228573"></p><h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><p>打开博客<code>根目录配置文件</code>(<code>…\MyBlog\_config.yaml</code>)或(<code>…\MyBlog\_config.yml</code>)，拉到文件最后一行，修改为下面的配置（没有的配置项自行添加），保存。</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 其中 xxxxxx 是前面多次用到的你的GitHub用户名</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: git@github.com:xxxxxx/xxxxxx.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><p>最后执行下面命令：</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>待命令执行完毕，打开浏览器，输入网址<code>https://你的用户名.github.io</code>，可以看到一个和第之前本地部署的一模一样的博客出现了。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 教程 </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/08/20/hello-world/"/>
      <url>/2021/08/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
